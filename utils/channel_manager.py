import discord
from discord.ext import commands
import functools

class ChannelManager:
    """Qu·∫£n l√Ω c√°c h·∫°n ch·∫ø k√™nh cho bot"""
    
    CHANNEL_CONFIG = {
        'welcome': 'üëã„Éªwelcome',    # K√™nh welcome messages
        'music': 'üé∂„Éªmusic',       # K√™nh music commands  
        'bot': 'ü§ñ„Éªbot',          # K√™nh bot commands kh√°c
    }
    
    MUSIC_COMMANDS = [
        'play', 'pause', 'stop', 'skip', 'queue', 'nowplaying', 'volume',
        'shuffle', 'repeat', 'clear', 'remove', 'move', 'jump', 'seek',
        'lyrics', 'soundcloud', 'sc', 'universal', 'mix'
    ]
    
    @staticmethod
    def get_required_channel(command_name: str) -> str:
        """L·∫•y t√™n k√™nh y√™u c·∫ßu cho command"""
        if command_name.lower() in ChannelManager.MUSIC_COMMANDS:
            return ChannelManager.CHANNEL_CONFIG['music']
        return ChannelManager.CHANNEL_CONFIG['bot']
    
    @staticmethod
    def is_correct_channel(ctx, required_channel: str) -> bool:
        """Ki·ªÉm tra xem command c√≥ ƒë∆∞·ª£c ch·∫°y trong ƒë√∫ng k√™nh kh√¥ng"""
        return ctx.channel.name == required_channel
    
    @staticmethod
    def channel_only(channel_name: str):
        """Decorator ƒë·ªÉ h·∫°n ch·∫ø command ch·ªâ ch·∫°y trong k√™nh c·ª• th·ªÉ"""
        def decorator(func):
            @functools.wraps(func)
            async def wrapper(self, ctx, *args, **kwargs):
                if not ChannelManager.is_correct_channel(ctx, channel_name):
                    embed = discord.Embed(
                        title="‚ö†Ô∏è Sai k√™nh",
                        description=f"L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong <#{discord.utils.get(ctx.guild.text_channels, name=channel_name).id if discord.utils.get(ctx.guild.text_channels, name=channel_name) else channel_name}>",
                        color=0xF39C12
                    )
                    msg = await ctx.send(embed=embed)
                    # X√≥a message sau 5 gi√¢y
                    await msg.delete(delay=5)
                    try:
                        await ctx.message.delete(delay=5)
                    except:
                        pass
                    return
                
                return await func(self, ctx, *args, **kwargs)
            return wrapper
        return decorator
    
    @staticmethod
    def music_only():
        """Decorator cho music commands"""
        return ChannelManager.channel_only(ChannelManager.CHANNEL_CONFIG['music'])
    
    @staticmethod  
    def bot_only():
        """Decorator cho bot commands"""
        return ChannelManager.channel_only(ChannelManager.CHANNEL_CONFIG['bot'])

# Global check function
async def check_channel_permissions(ctx):
    """Global check cho t·∫•t c·∫£ commands"""
    # Cho ph√©p admin bypass channel restrictions
    if ctx.author.guild_permissions.administrator:
        return True
    
    # L·∫•y t√™n command
    command_name = ctx.command.name if ctx.command else ''
    
    # X√°c ƒë·ªãnh k√™nh y√™u c·∫ßu
    required_channel = ChannelManager.get_required_channel(command_name)
    
    # Ki·ªÉm tra k√™nh hi·ªán t·∫°i
    if not ChannelManager.is_correct_channel(ctx, required_channel):
        target_channel = discord.utils.get(ctx.guild.text_channels, name=required_channel)
        embed = discord.Embed(
            title="‚ö†Ô∏è Sai k√™nh",
            description=f"L·ªánh `{command_name}` ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong {target_channel.mention if target_channel else f'#{required_channel}'}",
            color=0xF39C12
        )
        msg = await ctx.send(embed=embed)
        await msg.delete(delay=5)
        try:
            await ctx.message.delete(delay=5)
        except:
            pass
        return False
    
    return True
