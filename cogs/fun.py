import discord
from discord.ext import commands
import aiohttp
import random
import asyncio
from typing import Optional

class Fun(commands.Cog):
    """üéÆ Gi·∫£i tr√≠ & Fun - C√°c l·ªánh vui nh·ªôn v√† gi·∫£i tr√≠"""
    
    def __init__(self, bot):
        self.bot = bot
        self.eight_ball_responses = [
            "Ch·∫Øc ch·∫Øn r·ªìi! ‚úÖ",
            "Kh√¥ng ƒë√¢u! ‚ùå", 
            "C√≥ th·ªÉ ƒë·∫•y! ü§î",
            "T√πy duy√™n th√¥i! üé≤",
            "H·ªèi l·∫°i sau nh√©! ‚è∞",
            "Kh·∫£ nƒÉng cao! üìà",
            "Kh√≥ ƒë·∫•y! üìâ",
            "Ch·∫Øc l√† kh√¥ng! üö´",
            "Tin t∆∞·ªüng ƒëi! üí™",
            "ƒê·ª´ng m∆°! üí≠"
        ]
    
    async def fetch_json(self, url: str) -> Optional[dict]:
        """Helper function to fetch JSON from API"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.json()
        except Exception as e:
            print(f"Error fetching from {url}: {e}")
        return None
    
    @commands.command(name='meme', aliases=['mem'])
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def meme(self, ctx):
        """G·ª≠i meme ng·∫´u nhi√™n t·ª´ Reddit"""
        async with ctx.typing():
            # Th·ª≠ c√°c API kh√°c nhau ƒë·ªÉ ƒë·∫£m b·∫£o ho·∫°t ƒë·ªông
            api_urls = [
                "https://meme-api.com/gimme",
                "https://meme-api.herokuapp.com/gimme", 
                "https://memes.blademaker.tv/api/random"
            ]
            
            data = None
            for url in api_urls:
                data = await self.fetch_json(url)
                if data and 'url' in data:
                    break
            
            if not data:
                # Fallback memes n·∫øu API kh√¥ng ho·∫°t ƒë·ªông
                fallback_memes = [
                    {
                        "title": "Khi code ch·∫°y ƒë∆∞·ª£c l·∫ßn ƒë·∫ßu ti√™n",
                        "url": "https://i.imgflip.com/5c7lwq.jpg",
                        "subreddit": "ProgrammerHumor",
                        "ups": 9999
                    },
                    {
                        "title": "Trying to fix a bug",
                        "url": "https://i.imgflip.com/1bij2j.jpg", 
                        "subreddit": "memes",
                        "ups": 8888
                    }
                ]
                data = random.choice(fallback_memes)
            
            embed = discord.Embed(
                title=f"üòÇ {data.get('title', 'Random Meme')}",
                url=data.get('postLink', ''),
                color=0x7289DA
            )
            embed.set_image(url=data['url'])
            embed.set_footer(text=f"üëç {data.get('ups', 'N/A')} upvotes ‚Ä¢ r/{data.get('subreddit', 'memes')}")
            
            await ctx.send(embed=embed)
    
    @commands.command(name='8ball', aliases=['8b', 'ball'])
    async def eight_ball(self, ctx, *, question: str = None):
        """Tr·∫£ l·ªùi c√¢u h·ªèi ki·ªÉu b√≥i to√°n"""
        if not question:
            embed = discord.Embed(
                title="‚ùì Thi·∫øu c√¢u h·ªèi",
                description=f"S·ª≠ d·ª•ng: `{self.bot.config['prefix']}8ball <c√¢u h·ªèi>`",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        response = random.choice(self.eight_ball_responses)
        
        embed = discord.Embed(
            title="üé± Qu·∫£ c·∫ßu th·∫ßn s·ªë 8",
            color=0x7289DA
        )
        embed.add_field(name="‚ùì C√¢u h·ªèi", value=question, inline=False)
        embed.add_field(name="üí´ Tr·∫£ l·ªùi", value=response, inline=False)
        embed.set_footer(text=f"H·ªèi b·ªüi {ctx.author.display_name}")
        
        await ctx.send(embed=embed)
    
    @commands.command(name='quote', aliases=['q'])
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def quote(self, ctx):
        """G·ª≠i m·ªôt c√¢u quote truy·ªÅn c·∫£m h·ª©ng"""
        async with ctx.typing():
            data = await self.fetch_json(self.bot.config['api_endpoints']['quote_api'])
            
            if not data:
                # Fallback quotes
                fallback_quotes = [
                    "H√†nh tr√¨nh ng√†n d·∫∑m b·∫Øt ƒë·∫ßu t·ª´ m·ªôt b∆∞·ªõc ch√¢n. - L√£o T·ª≠",
                    "Th√†nh c√¥ng kh√¥ng ph·∫£i l√† ch√¨a kh√≥a c·ªßa h·∫°nh ph√∫c. H·∫°nh ph√∫c l√† ch√¨a kh√≥a c·ªßa th√†nh c√¥ng. - Albert Schweitzer",
                    "ƒêi·ªÅu duy nh·∫•t kh√¥ng th·ªÉ thay ƒë·ªïi l√† s·ª± thay ƒë·ªïi. - Heraclitus",
                    "H·ªçc h·ªèi nh∆∞ th·ªÉ b·∫°n s·∫Ω s·ªëng m√£i m√£i. - Mahatma Gandhi",
                    "T∆∞∆°ng lai thu·ªôc v·ªÅ nh·ªØng ai tin v√†o v·∫ª ƒë·∫πp c·ªßa ∆∞·ªõc m∆°. - Eleanor Roosevelt"
                ]
                quote_data = random.choice(fallback_quotes).split(' - ')
                content = quote_data[0]
                author = quote_data[1] if len(quote_data) > 1 else "Unknown"
            else:
                content = data['content']
                author = data['author']
            
            embed = discord.Embed(
                title="üí≠ Quote c·ªßa ng√†y",
                description=f"*\"{content}\"*",
                color=0x7289DA
            )
            embed.set_footer(text=f"- {author}")
            
            await ctx.send(embed=embed)
    
    @commands.command(name='fact', aliases=['f'])
    @commands.cooldown(1, 10, commands.BucketType.user)
    async def fact(self, ctx):
        """G·ª≠i m·ªôt fact th√∫ v·ªã"""
        async with ctx.typing():
            data = await self.fetch_json(self.bot.config['api_endpoints']['fact_api'])
            
            if not data:
                # Fallback facts
                fallback_facts = [
                    "B·∫°n c√≥ bi·∫øt r·∫±ng b·∫°ch tu·ªôc c√≥ 3 tr√°i tim kh√¥ng?",
                    "M·∫≠t ong kh√¥ng bao gi·ªù h∆∞ h·ªèng. C√°c nh√† kh·∫£o c·ªï ƒë√£ t√¨m th·∫•y m·∫≠t ong 3000 nƒÉm tu·ªïi v·∫´n ƒÉn ƒë∆∞·ª£c!",
                    "M·ªôt con ·ªëc s√™n c√≥ th·ªÉ ng·ªß ƒë∆∞·ª£c 3 nƒÉm li√™n t·ª•c.",
                    "Chu·ªëi l√† qu·∫£ m·ªçng, c√≤n d√¢u t√¢y th√¨ kh√¥ng ph·∫£i!",
                    "C√° voi xanh c√≥ tr√°i tim to b·∫±ng m·ªôt chi·∫øc xe h∆°i."
                ]
                fact_text = random.choice(fallback_facts)
            else:
                fact_text = data['text']
            
            embed = discord.Embed(
                title="üß† Fact th√∫ v·ªã",
                description=fact_text,
                color=0x7289DA
            )
            embed.set_footer(text="Fact of the day!")
            
            await ctx.send(embed=embed)
    
    @commands.command(name='cat', aliases=['meo'])
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def cat(self, ctx):
        """G·ª≠i ·∫£nh m√®o random"""
        async with ctx.typing():
            # Th·ª≠ nhi·ªÅu API kh√°c nhau
            cat_apis = [
                "https://api.thecatapi.com/v1/images/search",
                "https://cataas.com/cat?json=true",
                "https://aws.random.cat/meow"
            ]
            
            data = None
            for api in cat_apis:
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(api) as response:
                            if response.status == 200:
                                json_data = await response.json()
                                if api == "https://aws.random.cat/meow":
                                    data = [{"url": json_data["file"]}]
                                elif api == "https://cataas.com/cat?json=true":
                                    data = [{"url": f"https://cataas.com{json_data['url']}"}]
                                else:
                                    data = json_data
                                break
                except:
                    continue
            
            if not data or not isinstance(data, list) or len(data) == 0:
                # Fallback cat images
                fallback_cats = [
                    "https://cataas.com/cat",
                    "https://placekitten.com/400/300",
                    "https://i.imgur.com/jRBBASV.jpg"
                ]
                cat_url = random.choice(fallback_cats)
            else:
                cat_url = data[0]['url']
            
            embed = discord.Embed(
                title="üê± M√®o d·ªÖ th∆∞∆°ng!",
                color=0x7289DA
            )
            embed.set_image(url=cat_url)
            embed.set_footer(text="Meow! üêæ")
            
            await ctx.send(embed=embed)
    
    @commands.command(name='dog', aliases=['cho'])
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def dog(self, ctx):
        """G·ª≠i ·∫£nh ch√≥ random"""
        async with ctx.typing():
            # Th·ª≠ nhi·ªÅu API kh√°c nhau
            dog_apis = [
                "https://api.thedogapi.com/v1/images/search",
                "https://dog.ceo/api/breeds/image/random",
                "https://random.dog/woof.json"
            ]
            
            data = None
            for api in dog_apis:
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(api) as response:
                            if response.status == 200:
                                json_data = await response.json()
                                if api == "https://dog.ceo/api/breeds/image/random":
                                    data = [{"url": json_data["message"]}]
                                elif api == "https://random.dog/woof.json":
                                    data = [{"url": json_data["url"]}]
                                else:
                                    data = json_data
                                break
                except:
                    continue
            
            if not data or not isinstance(data, list) or len(data) == 0:
                # Fallback dog images
                fallback_dogs = [
                    "https://place.dog/400/300",
                    "https://i.imgur.com/MP9jAiW.jpg",
                    "https://images.dog.ceo/breeds/labrador/n02099712_1181.jpg"
                ]
                dog_url = random.choice(fallback_dogs)
            else:
                dog_url = data[0]['url']
            
            embed = discord.Embed(
                title="üê∂ Ch√≥ d·ªÖ th∆∞∆°ng!",
                color=0x7289DA
            )
            embed.set_image(url=dog_url)
            embed.set_footer(text="Woof! üêæ")
            
            await ctx.send(embed=embed)
    
    @commands.command(name='image', aliases=['img', 'pic'])
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def random_image(self, ctx, *, query: str = None):
        """G·ª≠i ·∫£nh random ho·∫∑c theo t·ª´ kh√≥a"""
        async with ctx.typing():
            if not query:
                # Random images t·ª´ c√°c ngu·ªìn kh√°c nhau
                random_sources = [
                    "https://picsum.photos/400/300",
                    "https://source.unsplash.com/400x300/?nature",
                    "https://source.unsplash.com/400x300/?city",
                    "https://source.unsplash.com/400x300/?art",
                    "https://source.unsplash.com/400x300/?animal"
                ]
                image_url = random.choice(random_sources)
                title = "üñºÔ∏è ·∫¢nh ng·∫´u nhi√™n"
                query_text = "Random"
            else:
                # T√¨m ·∫£nh theo t·ª´ kh√≥a
                search_query = query.replace(" ", "%20")
                image_url = f"https://source.unsplash.com/400x300/?{search_query}"
                title = f"üîç ·∫¢nh v·ªÅ: {query}"
                query_text = query
            
            embed = discord.Embed(
                title=title,
                color=0x7289DA
            )
            embed.set_image(url=image_url)
            embed.set_footer(text=f"T·ª´ kh√≥a: {query_text} ‚Ä¢ Powered by Unsplash")
            
            await ctx.send(embed=embed)
    
    @commands.command(name='anime', aliases=['waifu'])
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def anime_image(self, ctx):
        """G·ª≠i ·∫£nh anime random"""
        async with ctx.typing():
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get("https://api.waifu.pics/sfw/waifu") as response:
                        if response.status == 200:
                            data = await response.json()
                            image_url = data["url"]
                        else:
                            raise Exception("API not available")
            except:
                # Fallback anime images
                fallback_anime = [
                    "https://i.imgur.com/5Q5R5wM.jpg",
                    "https://i.imgur.com/yQVH6R4.jpg",
                    "https://i.imgur.com/8n8QKAW.jpg"
                ]
                image_url = random.choice(fallback_anime)
            
            embed = discord.Embed(
                title="üéå Anime Random",
                color=0x7289DA
            )
            embed.set_image(url=image_url)
            embed.set_footer(text="Kawaii desu! ‚ú®")
            
            await ctx.send(embed=embed)
    
    @commands.command(name='pokemon', aliases=['poke'])
    @commands.cooldown(1, 5, commands.BucketType.user)
    async def pokemon(self, ctx, pokemon_name: str = None):
        """Hi·ªÉn th·ªã th√¥ng tin Pokemon"""
        async with ctx.typing():
            if not pokemon_name:
                # Random pokemon
                pokemon_id = random.randint(1, 151)  # Gen 1 pokemon
                url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_id}"
            else:
                url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_name.lower()}"
            
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(url) as response:
                        if response.status == 200:
                            data = await response.json()
                        else:
                            await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y Pokemon n√†y!")
                            return
            except:
                await ctx.send("‚ùå L·ªói khi t√¨m Pokemon!")
                return
            
            name = data["name"].title()
            pokemon_id = data["id"]
            height = data["height"] / 10  # Convert to meters
            weight = data["weight"] / 10  # Convert to kg
            types = [t["type"]["name"].title() for t in data["types"]]
            
            embed = discord.Embed(
                title=f"#{pokemon_id:03d} {name}",
                color=0x7289DA
            )
            embed.set_thumbnail(url=data["sprites"]["front_default"])
            embed.add_field(name="Lo·∫°i", value=" / ".join(types), inline=True)
            embed.add_field(name="Chi·ªÅu cao", value=f"{height}m", inline=True)
            embed.add_field(name="C√¢n n·∫∑ng", value=f"{weight}kg", inline=True)
            embed.set_footer(text="Gotta catch 'em all! üî•")
            
            await ctx.send(embed=embed)
    
    @commands.command(name='flip', aliases=['coinflip', 'coin'])
    async def flip_coin(self, ctx):
        """Tung ƒë·ªìng xu"""
        result = random.choice(['Ng·ª≠a', 'S·∫•p'])
        emoji = 'ü™ô' if result == 'Ng·ª≠a' else 'ü•û'
        
        embed = discord.Embed(
            title="ü™ô Tung ƒë·ªìng xu",
            description=f"{emoji} **{result}**!",
            color=0x7289DA
        )
        embed.set_footer(text=f"Tung b·ªüi {ctx.author.display_name}")
        
        await ctx.send(embed=embed)
    
    @commands.command(name='dice', aliases=['roll', 'zar'])
    async def roll_dice(self, ctx, sides: int = 6):
        """Tung x√∫c x·∫Øc"""
        if sides < 2 or sides > 100:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="S·ªë m·∫∑t ph·∫£i t·ª´ 2 ƒë·∫øn 100!",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        result = random.randint(1, sides)
        
        embed = discord.Embed(
            title="üé≤ Tung x√∫c x·∫Øc",
            description=f"X√∫c x·∫Øc {sides} m·∫∑t: **{result}**",
            color=0x7289DA
        )
        embed.set_footer(text=f"Tung b·ªüi {ctx.author.display_name}")
        
        await ctx.send(embed=embed)
    
    @commands.command(name='choose', aliases=['pick'])
    async def choose(self, ctx, *, choices: str = None):
        """Ch·ªçn ng·∫´u nhi√™n t·ª´ danh s√°ch (c√°ch nhau b·ªüi d·∫•u ph·∫©y)"""
        if not choices:
            embed = discord.Embed(
                title="‚ùå Thi·∫øu l·ª±a ch·ªçn",
                description=f"S·ª≠ d·ª•ng: `{self.bot.config['prefix']}choose option1, option2, option3`",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        choice_list = [choice.strip() for choice in choices.split(',')]
        if len(choice_list) < 2:
            embed = discord.Embed(
                title="‚ùå L·ªói", 
                description="C·∫ßn √≠t nh·∫•t 2 l·ª±a ch·ªçn, c√°ch nhau b·ªüi d·∫•u ph·∫©y!",
                color=0xFF0000
            )
            await ctx.send(embed=embed)
            return
        
        chosen = random.choice(choice_list)
        
        embed = discord.Embed(
            title="ü§î L·ª±a ch·ªçn c·ªßa t√¥i",
            description=f"T√¥i ch·ªçn: **{chosen}**",
            color=0x7289DA
        )
        embed.add_field(
            name="C√°c l·ª±a ch·ªçn",
            value=", ".join(choice_list),
            inline=False
        )
        embed.set_footer(text=f"Ch·ªçn cho {ctx.author.display_name}")
        
        await ctx.send(embed=embed)

    # Helper methods for menu system interactions
    async def meme_command(self, interaction):
        """Helper method for meme command via interaction"""
        await interaction.response.defer()
        
        # Try different APIs for memes
        api_urls = [
            "https://meme-api.com/gimme",
            "https://meme-api.herokuapp.com/gimme", 
            "https://memes.blademaker.tv/api/random"
        ]
        
        data = None
        for url in api_urls:
            data = await self.fetch_json(url)
            if data:
                break
        
        if not data:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Kh√¥ng th·ªÉ t·∫£i meme l√∫c n√†y. Th·ª≠ l·∫°i sau!",
                color=0xFF0000
            )
            await interaction.followup.send(embed=embed)
            return
        
        # Handle different API response formats
        title = data.get('title', 'Random Meme')
        image_url = data.get('url') or data.get('image')
        post_link = data.get('postLink', '')
        
        if not image_url:
            await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ t·∫£i ·∫£nh meme!")
            return
        
        embed = discord.Embed(
            title="üòÇ Meme cho b·∫°n!",
            description=title[:256],  # Limit title length
            color=0xFF6B35
        )
        embed.set_image(url=image_url)
        
        if post_link:
            embed.add_field(name="üîó Ngu·ªìn", value=f"[Reddit]({post_link})", inline=False)
        
        embed.set_footer(text="üéØ Meme ƒë∆∞·ª£c t·∫£i t·ª´ Reddit")
        
        await interaction.followup.send(embed=embed)

    async def cat_command(self, interaction):
        """Helper method for cat command via interaction"""
        await interaction.response.defer()
        
        data = await self.fetch_json("https://api.thecatapi.com/v1/images/search")
        
        if not data or not data[0].get('url'):
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Kh√¥ng th·ªÉ t·∫£i ·∫£nh m√®o l√∫c n√†y!",
                color=0xFF0000
            )
            await interaction.followup.send(embed=embed)
            return
        
        embed = discord.Embed(
            title="üê± M√®o d·ªÖ th∆∞∆°ng cho b·∫°n!",
            color=0xFFB6C1
        )
        embed.set_image(url=data[0]['url'])
        embed.set_footer(text="üêæ ·∫¢nh t·ª´ The Cat API")
        
        await interaction.followup.send(embed=embed)

    async def dog_command(self, interaction):
        """Helper method for dog command via interaction"""
        await interaction.response.defer()
        
        data = await self.fetch_json("https://api.thedogapi.com/v1/images/search")
        
        if not data or not data[0].get('url'):
            embed = discord.Embed(
                title="‚ùå L·ªói", 
                description="Kh√¥ng th·ªÉ t·∫£i ·∫£nh ch√≥ l√∫c n√†y!",
                color=0xFF0000
            )
            await interaction.followup.send(embed=embed)
            return
        
        embed = discord.Embed(
            title="üê∂ Ch√≥ ƒë√°ng y√™u cho b·∫°n!",
            color=0xDEB887
        )
        embed.set_image(url=data[0]['url'])
        embed.set_footer(text="üêï ·∫¢nh t·ª´ The Dog API")
        
        await interaction.followup.send(embed=embed)


async def setup(bot):
    await bot.add_cog(Fun(bot))
