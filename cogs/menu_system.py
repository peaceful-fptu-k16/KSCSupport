import discord
from discord.ext import commands
from discord import app_commands
import asyncio

# Modal classes for text input
class AskModal(discord.ui.Modal, title='üß† H·ªèi AI'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    question = discord.ui.TextInput(
        label='C√¢u h·ªèi c·ªßa b·∫°n',
        placeholder='Nh·∫≠p c√¢u h·ªèi b·∫°n mu·ªën h·ªèi AI...',
        style=discord.TextStyle.paragraph,
        max_length=1000
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        # Get AI cog and process the question
        ai_cog = self.bot.get_cog('AICog')
        if ai_cog:
            await ai_cog.ask_command(interaction, self.question.value)
        else:
            await interaction.response.send_message("‚ùå AI module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

class TranslateModal(discord.ui.Modal, title='üåê D·ªãch thu·∫≠t'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    text = discord.ui.TextInput(
        label='VƒÉn b·∫£n c·∫ßn d·ªãch',
        placeholder='Nh·∫≠p vƒÉn b·∫£n b·∫°n mu·ªën d·ªãch...',
        style=discord.TextStyle.paragraph,
        max_length=1000
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        ai_cog = self.bot.get_cog('AICog')
        if ai_cog:
            await ai_cog.translate_command(interaction, self.text.value)
        else:
            await interaction.response.send_message("‚ùå AI module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

class ExplainModal(discord.ui.Modal, title='üìö Gi·∫£i th√≠ch'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    concept = discord.ui.TextInput(
        label='Kh√°i ni·ªám c·∫ßn gi·∫£i th√≠ch',
        placeholder='Nh·∫≠p kh√°i ni·ªám b·∫°n mu·ªën hi·ªÉu...',
        style=discord.TextStyle.short,
        max_length=200
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        ai_cog = self.bot.get_cog('AICog')
        if ai_cog:
            await ai_cog.explain_command(interaction, self.concept.value)
        else:
            await interaction.response.send_message("‚ùå AI module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

class SummaryModal(discord.ui.Modal, title='üìÑ T√≥m t·∫Øt'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    text = discord.ui.TextInput(
        label='VƒÉn b·∫£n c·∫ßn t√≥m t·∫Øt',
        placeholder='Nh·∫≠p vƒÉn b·∫£n d√†i b·∫°n mu·ªën t√≥m t·∫Øt...',
        style=discord.TextStyle.paragraph,
        max_length=2000
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        ai_cog = self.bot.get_cog('AICog')
        if ai_cog:
            await ai_cog.summary_command(interaction, self.text.value)
        else:
            await interaction.response.send_message("‚ùå AI module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

# AI Image Generation Modals
class GenerateImageModal(discord.ui.Modal, title='üé® T·∫°o ·∫£nh AI'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    prompt = discord.ui.TextInput(
        label='M√¥ t·∫£ ·∫£nh b·∫°n mu·ªën t·∫°o',
        placeholder='V√≠ d·ª•: a beautiful sunset over mountains, anime style...',
        style=discord.TextStyle.paragraph,
        max_length=500
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        ai_image_cog = self.bot.get_cog('AIImageCog')
        if ai_image_cog:
            await ai_image_cog.generate_command(interaction, self.prompt.value)
        else:
            await interaction.response.send_message("‚ùå AI Image module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

class StyleImageModal(discord.ui.Modal):
    def __init__(self, bot, style):
        super().__init__(title=f'üé≠ T·∫°o ·∫£nh {style} style')
        self.bot = bot
        self.style = style
        
        self.prompt = discord.ui.TextInput(
            label=f'M√¥ t·∫£ ·∫£nh ({style} style)',
            placeholder='Nh·∫≠p m√¥ t·∫£ cho ·∫£nh...',
            style=discord.TextStyle.paragraph,
            max_length=500
        )
        self.add_item(self.prompt)
    
    async def on_submit(self, interaction: discord.Interaction):
        ai_image_cog = self.bot.get_cog('AIImageCog')
        if ai_image_cog:
            await ai_image_cog.style_command(interaction, self.style, self.prompt.value)
        else:
            await interaction.response.send_message("‚ùå AI Image module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

class PlayMusicModal(discord.ui.Modal, title='üéµ Ph√°t nh·∫°c YouTube'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    query = discord.ui.TextInput(
        label='T√™n b√†i h√°t ho·∫∑c URL YouTube',
        placeholder='V√≠ d·ª•: Shape of You, https://youtube.com/watch?v=...',
        style=discord.TextStyle.short,
        max_length=200
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.play_command(interaction, self.query.value)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

# SoundCloud Modals
class SoundCloudModal(discord.ui.Modal, title='üéµ Ph√°t nh·∫°c SoundCloud'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    query = discord.ui.TextInput(
        label='T√™n b√†i h√°t ho·∫∑c URL SoundCloud',
        placeholder='V√≠ d·ª•: Artist - Song Name, https://soundcloud.com/...',
        style=discord.TextStyle.short,
        max_length=200
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        soundcloud_cog = self.bot.get_cog('SoundCloudAdvanced')
        if soundcloud_cog:
            # Use the new method designed for modal interactions
            await soundcloud_cog.play_from_modal(interaction, self.query.value)
        else:
            await interaction.response.send_message("‚ùå SoundCloud Advanced module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

class SoundCloudVolumeModal(discord.ui.Modal, title='üîä ƒêi·ªÅu ch·ªânh √¢m l∆∞·ª£ng SoundCloud'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    volume = discord.ui.TextInput(
        label='M·ª©c √¢m l∆∞·ª£ng (0-100)',
        placeholder='V√≠ d·ª•: 50, 75, 100...',
        style=discord.TextStyle.short,
        max_length=3
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            volume_value = int(self.volume.value)
            if not 0 <= volume_value <= 100:
                await interaction.response.send_message("‚ùå √Çm l∆∞·ª£ng ph·∫£i t·ª´ 0-100!", ephemeral=True)
                return
                
            soundcloud_cog = self.bot.get_cog('SoundCloudAdvanced')
            if soundcloud_cog:
                await soundcloud_cog.volume_from_modal(interaction, volume_value)
            else:
                await interaction.response.send_message("‚ùå SoundCloud Advanced module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
        except ValueError:
            await interaction.response.send_message("‚ùå Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá!", ephemeral=True)

# Fun & Games Modals
class RockPaperScissorsModal(discord.ui.Modal, title='‚úÇÔ∏è K√©o B√∫a Bao'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    choice = discord.ui.TextInput(
        label='L·ª±a ch·ªçn c·ªßa b·∫°n',
        placeholder='rock, paper, ho·∫∑c scissors',
        style=discord.TextStyle.short,
        max_length=10
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        games_cog = self.bot.get_cog('Games')
        if games_cog:
            await games_cog.rps_command(interaction, self.choice.value.lower())
        else:
            await interaction.response.send_message("‚ùå Games module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

class EightBallModal(discord.ui.Modal, title='üé± Qu·∫£ c·∫ßu th·∫ßn'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    question = discord.ui.TextInput(
        label='C√¢u h·ªèi c·ªßa b·∫°n',
        placeholder='H·ªèi m·ªôt c√¢u h·ªèi c√≥/kh√¥ng...',
        style=discord.TextStyle.paragraph,
        max_length=200
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        games_cog = self.bot.get_cog('Games')
        if games_cog:
            await games_cog.eightball_command(interaction, self.question.value)
        else:
            await interaction.response.send_message("‚ùå Games module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

# Reminder Modal
class ReminderModal(discord.ui.Modal, title='‚è∞ T·∫°o Reminder'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    time_input = discord.ui.TextInput(
        label='Th·ªùi gian',
        placeholder='V√≠ d·ª•: 30m, 2h, 1d...',
        style=discord.TextStyle.short,
        max_length=10
    )
    
    content = discord.ui.TextInput(
        label='N·ªôi dung nh·∫Øc nh·ªü',
        placeholder='Nh·∫≠p n·ªôi dung b·∫°n mu·ªën ƒë∆∞·ª£c nh·∫Øc nh·ªü...',
        style=discord.TextStyle.paragraph,
        max_length=500
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        scheduler_cog = self.bot.get_cog('Scheduler')
        if scheduler_cog:
            await scheduler_cog.remind_command(interaction, self.time_input.value, self.content.value)
        else:
            await interaction.response.send_message("‚ùå Scheduler module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

# AI Commands Interactive View
class AICommandsView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)
        self.bot = bot
        
    @discord.ui.button(label='üí¨ H·ªèi AI', style=discord.ButtonStyle.primary, emoji='üß†')
    async def ask_ai(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = AskModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üåê D·ªãch thu·∫≠t', style=discord.ButtonStyle.primary, emoji='üó£Ô∏è')
    async def translate(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = TranslateModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üìö Gi·∫£i th√≠ch', style=discord.ButtonStyle.primary, emoji='üí°')
    async def explain(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ExplainModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üìÑ T√≥m t·∫Øt', style=discord.ButtonStyle.primary, emoji='üìã')
    async def summary(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = SummaryModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='‚óÄÔ∏è Quay l·∫°i', style=discord.ButtonStyle.secondary, emoji='üè†')
    async def back_to_main(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="ü§ñ KSC Support - Menu Ch√≠nh",
            description="**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi KSC Support!**\n\nBot ƒëa ch·ª©c nƒÉng v·ªõi AI, Music, Games v√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c.\n\nüî• **T√≠nh nƒÉng HOT:**\n‚Ä¢ üß† AI Chat v·ªõi Gemini\n‚Ä¢ üé® T·∫°o ·∫£nh AI v·ªõi 10+ styles\n‚Ä¢ üéµ Music bot v·ªõi Playlist\n‚Ä¢ üìä Analytics real-time\n\n**Ch·ªçn m·ªôt danh m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt:**",
            color=discord.Color.blurple()
        )
        embed.add_field(
            name="üëã Xin ch√†o!",
            value=f"Ch√†o {interaction.user.mention}! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            inline=False
        )
        embed.set_footer(text="üí° Menu s·∫Ω ƒë√≥ng sau 60s v√† t·ª± ƒë·ªông x√≥a sau 10 ph√∫t | KSC Support v3.0.0")
        await interaction.response.edit_message(embed=embed, view=MenuView(self.bot))

class MenuView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)  # 60 gi√¢y timeout
        self.bot = bot
        
    @discord.ui.button(label='üß† AI Commands', style=discord.ButtonStyle.primary, emoji='ü§ñ')
    async def ai_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üß† AI Commands - Powered by Gemini",
            description="C√°c l·ªánh AI th√¥ng minh ƒë·ªÉ h·ªó tr·ª£ b·∫°n\n\n**Ch·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën s·ª≠ d·ª•ng:**",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="ÔøΩ Chat v·ªõi AI",
            value="H·ªèi AI b·∫•t k·ª≥ ƒëi·ªÅu g√¨ - t·ª´ c√¢u h·ªèi ƒë∆°n gi·∫£n ƒë·∫øn ph·ª©c t·∫°p",
            inline=False
        )
        embed.add_field(
            name="üåê D·ªãch thu·∫≠t",
            value="D·ªãch vƒÉn b·∫£n gi·ªØa c√°c ng√¥n ng·ªØ kh√°c nhau",
            inline=False
        )
        embed.add_field(
            name="üìö Gi·∫£i th√≠ch",
            value="Gi·∫£i th√≠ch kh√°i ni·ªám, thu·∫≠t ng·ªØ m·ªôt c√°ch d·ªÖ hi·ªÉu",
            inline=False
        )
        embed.add_field(
            name="üìÑ T√≥m t·∫Øt",
            value="T√≥m t·∫Øt vƒÉn b·∫£n d√†i th√†nh nh·ªØng ƒëi·ªÉm ch√≠nh",
            inline=False
        )
        embed.set_footer(text="üí° Click v√†o button ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng t∆∞∆°ng ·ª©ng")
        await interaction.response.edit_message(embed=embed, view=AICommandsView(self.bot))

    @discord.ui.button(label='üéµ YouTube', style=discord.ButtonStyle.success, emoji='üì∫')
    async def youtube_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéµ YouTube Music Player",
            description="H·ªá th·ªëng ph√°t nh·∫°c YouTube v·ªõi ch·∫•t l∆∞·ª£ng cao\n\n**Ch·ª©c nƒÉng YouTube Music:**",
            color=0xFF0000  # YouTube red color
        )
        embed.add_field(
            name="üéµ Ph√°t nh·∫°c YouTube",
            value="Ph√°t nh·∫°c, playlist t·ª´ YouTube",
            inline=False
        )
        embed.add_field(
            name="‚è∏Ô∏è ƒêi·ªÅu khi·ªÉn ƒë·∫ßy ƒë·ªß",
            value="Pause, Resume, Skip, Queue, Loop",
            inline=False
        )
        embed.add_field(
            name="üéÆ T√≠nh nƒÉng n√¢ng cao",
            value="Music Quiz, History, Auto DJ",
            inline=False
        )
        embed.set_footer(text="üì∫ YouTube Music - Click button ƒë·ªÉ s·ª≠ d·ª•ng")
        await interaction.response.edit_message(embed=embed, view=YouTubeView(self.bot))

    @discord.ui.button(label='üéµ SoundCloud', style=discord.ButtonStyle.success, emoji='‚òÅÔ∏è')
    async def soundcloud_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéµ SoundCloud Player",
            description="Ph√°t nh·∫°c t·ª´ SoundCloud - N·ªÅn t·∫£ng √¢m nh·∫°c ƒë·ªôc l·∫≠p\n\n**Ch·ª©c nƒÉng SoundCloud:**",
            color=0xFF5500  # SoundCloud orange color
        )
        embed.add_field(
            name="üéµ Ph√°t nh·∫°c SoundCloud",
            value="T√¨m ki·∫øm v√† ph√°t nh·∫°c t·ª´ SoundCloud",
            inline=False
        )
        embed.add_field(
            name="üîä ƒêi·ªÅu khi·ªÉn √¢m l∆∞·ª£ng",
            value="ƒêi·ªÅu ch·ªânh volume ri√™ng cho SoundCloud",
            inline=False
        )
        embed.add_field(
            name="üé® Nh·∫°c ƒë·ªôc l·∫≠p",
            value="Kh√°m ph√° nh·∫°c t·ª´ c√°c artist ƒë·ªôc l·∫≠p",
            inline=False
        )
        embed.set_footer(text="‚òÅÔ∏è SoundCloud Player - Click button ƒë·ªÉ s·ª≠ d·ª•ng")
        await interaction.response.edit_message(embed=embed, view=SoundCloudView(self.bot))

    @discord.ui.button(label='üé® AI Images', style=discord.ButtonStyle.secondary, emoji='üñºÔ∏è')
    async def image_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üé® AI Image Generation",
            description="T·∫°o ·∫£nh AI v·ªõi nhi·ªÅu phong c√°ch kh√°c nhau\n\n**Ch·ªçn style b·∫°n mu·ªën:**",
            color=discord.Color.purple()
        )
        embed.add_field(
            name="üñåÔ∏è T·∫°o ·∫£nh c∆° b·∫£n",
            value="T·∫°o ·∫£nh AI v·ªõi prompt t·ª± do",
            inline=False
        )
        embed.add_field(
            name="üé≠ Styles ƒë·∫∑c bi·ªát",
            value="Anime, Realistic, Cartoon v√† nhi·ªÅu style kh√°c",
            inline=False
        )
        embed.set_footer(text="üé® Click button ƒë·ªÉ ch·ªçn style v√† t·∫°o ·∫£nh")
        await interaction.response.edit_message(embed=embed, view=AIImageView(self.bot))

    @discord.ui.button(label='üéÆ Fun & Games', style=discord.ButtonStyle.danger, emoji='üéØ')
    async def fun_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéÆ Fun & Entertainment",
            description="Gi·∫£i tr√≠ v√† mini games th√∫ v·ªã\n\n**Ch·ªçn tr√≤ ch∆°i ho·∫∑c gi·∫£i tr√≠:**",
            color=discord.Color.red()
        )
        embed.add_field(
            name="üòÑ H√¨nh ·∫£nh vui",
            value="Memes, ·∫£nh m√®o, ch√≥ v√† nhi·ªÅu h∆°n n·ªØa",
            inline=False
        )
        embed.add_field(
            name="üé≤ Mini Games",
            value="K√©o b√∫a bao, 8ball v√† c√°c tr√≤ ch∆°i kh√°c",
            inline=False
        )
        embed.set_footer(text="üéÆ Click button ƒë·ªÉ ch∆°i!")
        await interaction.response.edit_message(embed=embed, view=FunGamesView(self.bot))

    @discord.ui.button(label='üìä Analytics', style=discord.ButtonStyle.secondary, emoji='üìà')
    async def analytics_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üìä Server Analytics & Stats",
            description="Th·ªëng k√™ v√† ph√¢n t√≠ch server chi ti·∫øt",
            color=discord.Color.gold()
        )
        embed.add_field(
            name="üè† Th·ªëng k√™ Server",
            value="`!serverstats` - T·ªïng quan server\n`!userstats [@user]` - Th·ªëng k√™ user\n`!topmessages` - Top ho·∫°t ƒë·ªông",
            inline=False
        )
        embed.add_field(
            name="üìà Server Stats",
            value="`!serverstats` - Th·ªëng k√™ server\n`!topmessages` - Top ho·∫°t ƒë·ªông\n`!serverinfo` - Th√¥ng tin server",
            inline=False
        )
        embed.add_field(
            name="üîß Utility",
            value="`!ping` - ƒê·ªô tr·ªÖ bot\n`!serverinfo` - Th√¥ng tin server\n`!userinfo [@user]` - Th√¥ng tin user",
            inline=False
        )
        embed.set_footer(text="üìä Real-time tracking v√† insights")
        await interaction.response.edit_message(embed=embed, view=BackView(self.bot))

    @discord.ui.button(label='üõ†Ô∏è Admin Tools', style=discord.ButtonStyle.danger, emoji='‚ö°')
    async def admin_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üõ†Ô∏è Admin & Moderation Tools",
            description="C√¥ng c·ª• qu·∫£n l√Ω server (Ch·ªâ Admin)",
            color=discord.Color.dark_red()
        )
        embed.add_field(
            name="üëÆ Moderation",
            value="`!kick <@user> [l√Ω do]` - Kick th√†nh vi√™n\n`!ban <@user> [l√Ω do]` - Ban th√†nh vi√™n\n`!unban <user_id>` - Unban\n`!mute <@user> <th·ªùi gian>` - Mute",
            inline=False
        )
        embed.add_field(
            name="üí¨ Message Management",
            value="`!clear <s·ªë l∆∞·ª£ng>` - X√≥a tin nh·∫Øn\n`!slowmode <gi√¢y>` - Ch·∫ø ƒë·ªô ch·∫≠m",
            inline=False
        )
        embed.add_field(
            name="üéâ Events Setup",
            value="`!setwelcome <#channel>` - Set welcome\n`!setgoodbye <#channel>` - Set goodbye\n`!toggledm` - DM settings\n`!welcometest` - Test events",
            inline=False
        )
        embed.add_field(
            name="‚ö†Ô∏è L∆∞u √Ω",
            value="C√°c l·ªánh n√†y ch·ªâ d√†nh cho Admin/Moderator",
            inline=False
        )
        embed.set_footer(text="üõ†Ô∏è Qu·∫£n l√Ω server hi·ªáu qu·∫£")
        await interaction.response.edit_message(embed=embed, view=BackView(self.bot))

    @discord.ui.button(label='‚è∞ Reminders', style=discord.ButtonStyle.secondary, emoji='üìÖ')
    async def reminder_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="‚è∞ Reminder & Schedule System",
            description="H·ªá th·ªëng nh·∫Øc nh·ªü v√† l√™n l·ªãch th√¥ng minh\n\n**Qu·∫£n l√Ω reminders c·ªßa b·∫°n:**",
            color=discord.Color.orange()
        )
        embed.add_field(
            name="‚è∞ T·∫°o Reminder",
            value="T·∫°o nh·∫Øc nh·ªü v·ªõi th·ªùi gian v√† n·ªôi dung",
            inline=False
        )
        embed.add_field(
            name="üìã Xem Reminders",
            value="Xem danh s√°ch c√°c reminder ƒë√£ t·∫°o",
            inline=False
        )
        embed.set_footer(text="‚è∞ Click button ƒë·ªÉ qu·∫£n l√Ω reminders")
        await interaction.response.edit_message(embed=embed, view=RemindersView(self.bot))

    @discord.ui.button(label='‚ùì Help', style=discord.ButtonStyle.secondary, emoji='üÜò')
    async def help_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üÜò Help & Support",
            description="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng v√† h·ªó tr·ª£",
            color=discord.Color.light_grey()
        )
        embed.add_field(
            name="üìö C√°ch s·ª≠ d·ª•ng",
            value="‚Ä¢ G√µ `bot ∆°i` ho·∫∑c `bot oi` ƒë·ªÉ m·ªü menu n√†y\n‚Ä¢ S·ª≠ d·ª•ng `!` tr∆∞·ªõc c√°c l·ªánh\n‚Ä¢ M·ªôt s·ªë l·ªánh h·ªó tr·ª£ `/` (slash commands)",
            inline=False
        )
        embed.add_field(
            name="‚ö° Quick Commands",
            value="`!help` - Danh s√°ch l·ªánh\n`!ping` - Ki·ªÉm tra ƒë·ªô tr·ªÖ\n`!serverinfo` - Th√¥ng tin server",
            inline=False
        )
        embed.add_field(
            name="üîß Permissions c·∫ßn thi·∫øt",
            value="‚Ä¢ Send Messages\n‚Ä¢ Read Message History\n‚Ä¢ Embed Links\n‚Ä¢ Attach Files\n‚Ä¢ Connect (cho music)",
            inline=False
        )
        embed.add_field(
            name="üåü Features m·ªõi",
            value="‚Ä¢ AI Image Generation\n‚Ä¢ Music Playlists\n‚Ä¢ Server Analytics\n‚Ä¢ Welcome/Goodbye Events",
            inline=False
        )
        embed.add_field(
            name="üìû Support",
            value="N·∫øu g·∫∑p l·ªói, h√£y b√°o cho Admin server",
            inline=False
        )
        embed.set_footer(text="ü§ñ KSC Support v3.0.0 - Developed with ‚ù§Ô∏è")
        await interaction.response.edit_message(embed=embed, view=BackView(self.bot))

    async def on_timeout(self):
        # Disable t·∫•t c·∫£ buttons khi timeout
        for item in self.children:
            item.disabled = True
        
        try:
            await self.message.edit(view=self)
        except:
            pass

# AI Image Commands Interactive View
class AIImageView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)
        self.bot = bot
        
    @discord.ui.button(label='üñåÔ∏è T·∫°o ·∫£nh c∆° b·∫£n', style=discord.ButtonStyle.primary, emoji='üé®')
    async def generate_basic(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = GenerateImageModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üé≠ Anime Style', style=discord.ButtonStyle.secondary, emoji='üëò')
    async def anime_style(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = StyleImageModal(self.bot, "anime")
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üé® Realistic Style', style=discord.ButtonStyle.secondary, emoji='üì∑')
    async def realistic_style(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = StyleImageModal(self.bot, "realistic")
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üé™ Cartoon Style', style=discord.ButtonStyle.secondary, emoji='üé≠')
    async def cartoon_style(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = StyleImageModal(self.bot, "cartoon")
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='‚óÄÔ∏è Quay l·∫°i', style=discord.ButtonStyle.danger, emoji='üè†')
    async def back_to_main(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="ü§ñ KSC Support - Menu Ch√≠nh",
            description="**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi KSC Support!**\n\nBot ƒëa ch·ª©c nƒÉng v·ªõi AI, Music, Games v√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c.\n\nüî• **T√≠nh nƒÉng HOT:**\n‚Ä¢ üß† AI Chat v·ªõi Gemini\n‚Ä¢ üé® T·∫°o ·∫£nh AI v·ªõi 10+ styles\n‚Ä¢ üéµ Music bot v·ªõi Playlist\n‚Ä¢ üìä Analytics real-time\n\n**Ch·ªçn m·ªôt danh m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt:**",
            color=discord.Color.blurple()
        )
        embed.add_field(
            name="üëã Xin ch√†o!",
            value=f"Ch√†o {interaction.user.mention}! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            inline=False
        )
        embed.set_footer(text="üí° Menu s·∫Ω ƒë√≥ng sau 60s v√† t·ª± ƒë·ªông x√≥a sau 10 ph√∫t | KSC Support v3.0.0")
        await interaction.response.edit_message(embed=embed, view=MenuView(self.bot))

# Music Commands Interactive View
# YouTube Music View
class YouTubeView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)
        self.bot = bot
        
    @discord.ui.button(label='üéµ Ph√°t nh·∫°c', style=discord.ButtonStyle.primary, emoji='‚ñ∂Ô∏è')
    async def play_youtube(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = PlayMusicModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='‚è∏Ô∏è Pause', style=discord.ButtonStyle.secondary, emoji='‚è∏Ô∏è')
    async def pause_music(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.pause_command(interaction)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
        
    @discord.ui.button(label='‚ñ∂Ô∏è Resume', style=discord.ButtonStyle.secondary, emoji='‚ñ∂Ô∏è')
    async def resume_music(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.resume_command(interaction)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
        
    @discord.ui.button(label='‚è≠Ô∏è Skip', style=discord.ButtonStyle.secondary, emoji='‚è≠Ô∏è')
    async def skip_music(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.skip_command(interaction)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
        
    @discord.ui.button(label='üîÄ Shuffle', style=discord.ButtonStyle.secondary, emoji='üîÄ')
    async def shuffle_queue(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.shuffle_command(interaction)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
            
    @discord.ui.button(label='üìã Queue', style=discord.ButtonStyle.primary, emoji='üìã', row=1)
    async def show_queue(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.queue_command(interaction)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

    @discord.ui.button(label='üéõÔ∏è Advanced', style=discord.ButtonStyle.primary, emoji='‚ö°', row=1)
    async def advanced_features(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéõÔ∏è Advanced YouTube Features",
            description="T√≠nh nƒÉng n√¢ng cao cho YouTube Music\n\n**C√°c t√≠nh nƒÉng c√≥ s·∫µn:**",
            color=0xFF0000
        )
        embed.add_field(
            name="üîÅ Loop Mode",
            value="L·∫∑p l·∫°i b√†i h√°t ho·∫∑c to√†n b·ªô queue",
            inline=False
        )
        embed.add_field(
            name="üîç Search Music",
            value="T√¨m ki·∫øm v√† preview nh·∫°c YouTube",
            inline=False
        )
        embed.add_field(
            name="üéÆ Music Quiz",
            value="Tr√≤ ch∆°i ƒëo√°n t√™n b√†i h√°t YouTube",
            inline=False
        )
        embed.add_field(
            name="üìö History & Auto DJ",
            value="Xem l·ªãch s·ª≠ v√† t·ª± ƒë·ªông DJ YouTube",
            inline=False
        )
        embed.set_footer(text="üì∫ YouTube Advanced Features")
        await interaction.response.edit_message(embed=embed, view=AdvancedMusicView(self.bot))

    @discord.ui.button(label='‚óÄÔ∏è Quay l·∫°i', style=discord.ButtonStyle.danger, emoji='üè†', row=1)
    async def back_to_main(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="ü§ñ KSC Support - Menu Ch√≠nh",
            description="**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi KSC Support!**\n\nBot ƒëa ch·ª©c nƒÉng v·ªõi AI, Music, Games v√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c.\n\nüî• **T√≠nh nƒÉng HOT:**\n‚Ä¢ üß† AI Chat v·ªõi Gemini\n‚Ä¢ üé® T·∫°o ·∫£nh AI v·ªõi 10+ styles\n‚Ä¢ üéµ Music bot v·ªõi Playlist\n‚Ä¢ üìä Analytics real-time\n\n**Ch·ªçn m·ªôt danh m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt:**",
            color=discord.Color.blurple()
        )
        embed.add_field(
            name="üëã Xin ch√†o!",
            value=f"Ch√†o {interaction.user.mention}! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            inline=False
        )
        embed.set_footer(text="üí° Menu s·∫Ω ƒë√≥ng sau 60s v√† t·ª± ƒë·ªông x√≥a sau 10 ph√∫t | KSC Support v3.0.0")
        await interaction.response.edit_message(embed=embed, view=MenuView(self.bot))

# SoundCloud Music View
class SoundCloudView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)
        self.bot = bot
        
    @discord.ui.button(label='üéµ Ph√°t SoundCloud', style=discord.ButtonStyle.primary, emoji='‚òÅÔ∏è')
    async def play_soundcloud(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = SoundCloudModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='‚èπÔ∏è D·ª´ng', style=discord.ButtonStyle.secondary, emoji='‚èπÔ∏è')
    async def stop_soundcloud(self, interaction: discord.Interaction, button: discord.ui.Button):
        soundcloud_cog = self.bot.get_cog('SoundCloudAdvanced')
        if soundcloud_cog:
            await soundcloud_cog.stop_from_modal(interaction)
        else:
            await interaction.response.send_message("‚ùå SoundCloud Advanced module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
            
    @discord.ui.button(label='üîä Volume', style=discord.ButtonStyle.secondary, emoji='üîä')
    async def soundcloud_volume(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = SoundCloudVolumeModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üëã R·ªùi channel', style=discord.ButtonStyle.secondary, emoji='üëã')
    async def leave_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        soundcloud_cog = self.bot.get_cog('SoundCloudAdvanced')
        if soundcloud_cog:
            await soundcloud_cog.leave_from_modal(interaction)
        else:
            await interaction.response.send_message("‚ùå SoundCloud Advanced module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

    @discord.ui.button(label='‚óÄÔ∏è Quay l·∫°i', style=discord.ButtonStyle.danger, emoji='üè†', row=1)
    async def back_to_main(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="ü§ñ KSC Support - Menu Ch√≠nh",
            description="**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi KSC Support!**\n\nBot ƒëa ch·ª©c nƒÉng v·ªõi AI, Music, Games v√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c.\n\nüî• **T√≠nh nƒÉng HOT:**\n‚Ä¢ üß† AI Chat v·ªõi Gemini\n‚Ä¢ üé® T·∫°o ·∫£nh AI v·ªõi 10+ styles\n‚Ä¢ üéµ Music bot v·ªõi Playlist\n‚Ä¢ üìä Analytics real-time\n\n**Ch·ªçn m·ªôt danh m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt:**",
            color=discord.Color.blurple()
        )
        embed.add_field(
            name="üëã Xin ch√†o!",
            value=f"Ch√†o {interaction.user.mention}! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            inline=False
        )
        embed.set_footer(text="üí° Menu s·∫Ω ƒë√≥ng sau 60s v√† t·ª± ƒë·ªông x√≥a sau 10 ph√∫t | KSC Support v3.0.0")
        await interaction.response.edit_message(embed=embed, view=MenuView(self.bot))

# Advanced Music Features View
class AdvancedMusicView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)
        self.bot = bot
        
    @discord.ui.button(label='üîÅ Loop Mode', style=discord.ButtonStyle.primary, emoji='üîÇ')
    async def loop_mode(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = LoopModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üîç Search Music', style=discord.ButtonStyle.secondary, emoji='üéµ')
    async def search_music(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = SearchMusicModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üéÆ Music Quiz', style=discord.ButtonStyle.success, emoji='üéØ')
    async def music_quiz(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            # Start quiz with default 5 rounds
            ctx = await self.bot.get_context(interaction.message)
            ctx.author = interaction.user
            ctx.guild = interaction.guild
            ctx.channel = interaction.channel
            await music_cog.music_quiz(ctx, 5)
            await interaction.response.send_message("üéµ Music Quiz ƒë√£ b·∫Øt ƒë·∫ßu!", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
            
    @discord.ui.button(label='ü§ñ Auto DJ', style=discord.ButtonStyle.secondary, emoji='üéß')
    async def auto_dj(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.loop_command(interaction, "queue")  # Enable auto DJ as queue loop
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
            
    @discord.ui.button(label='üéß DJ Mode', style=discord.ButtonStyle.danger, emoji='üéõÔ∏è')
    async def dj_mode(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéß DJ Mode Studio",
            description="**Professional DJ Controls & Effects** üéõÔ∏è\n\n**T√≠nh nƒÉng c√≥ s·∫µn:**",
            color=discord.Color.purple()
        )
        embed.add_field(
            name="üéöÔ∏è Mixing Controls",
            value="‚Ä¢ Crossfade transitions\n‚Ä¢ Beat matching\n‚Ä¢ Volume fading\n‚Ä¢ Seamless playback",
            inline=False
        )
        embed.add_field(
            name="üéõÔ∏è Audio Effects",
            value="‚Ä¢ Reverb, Echo, Flanger\n‚Ä¢ Low/High pass filters\n‚Ä¢ Distortion & Compression\n‚Ä¢ Real-time effect control",
            inline=False
        )
        embed.add_field(
            name="üìä DJ Analytics",
            value="‚Ä¢ Mix session stats\n‚Ä¢ Track analysis\n‚Ä¢ Performance metrics",
            inline=False
        )
        embed.set_footer(text="üéß Click button ƒë·ªÉ activate DJ Mode")
        await interaction.response.edit_message(embed=embed, view=DJModeView(self.bot))
            
    @discord.ui.button(label='üìö History', style=discord.ButtonStyle.secondary, emoji='üìú')
    async def music_history(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            queue = music_cog.get_queue(interaction.guild.id)
            
            if not hasattr(queue, 'history') or not queue.history:
                embed = discord.Embed(
                    title="üìö L·ªãch s·ª≠ ph√°t nh·∫°c",
                    description="Ch∆∞a c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c ph√°t!",
                    color=discord.Color.orange()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
                return
            
            embed = discord.Embed(
                title="üìö L·ªãch s·ª≠ ph√°t nh·∫°c",
                description="5 b√†i h√°t g·∫ßn ƒë√¢y nh·∫•t:",
                color=discord.Color.blue()
            )
            
            for i, song in enumerate(queue.history[-5:], 1):
                embed.add_field(
                    name=f"{i}. {song.get('title', 'Unknown')[:30]}{'...' if len(song.get('title', '')) > 30 else ''}",
                    value=f"üë§ {song.get('uploader', 'Unknown')[:20]}",
                    inline=False
                )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

    @discord.ui.button(label='‚óÄÔ∏è Quay l·∫°i YouTube', style=discord.ButtonStyle.danger, emoji='üì∫', row=1)
    async def back_to_music(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéµ YouTube Music Player",
            description="H·ªá th·ªëng ph√°t nh·∫°c YouTube v·ªõi ch·∫•t l∆∞·ª£ng cao\n\n**Ch·ª©c nƒÉng YouTube Music:**",
            color=0xFF0000
        )
        embed.add_field(
            name="üé∂ Ph√°t nh·∫°c YouTube",
            value="Play, Pause, Skip, Stop nh·∫°c t·ª´ YouTube",
            inline=False
        )
        embed.add_field(
            name="‚è∏Ô∏è ƒêi·ªÅu khi·ªÉn",
            value="Pause, Resume, Skip, Shuffle nh·∫°c",
            inline=False
        )
        embed.set_footer(text="üì∫ YouTube Music - Click v√†o button ƒë·ªÉ ƒëi·ªÅu khi·ªÉn nh·∫°c")
        await interaction.response.edit_message(embed=embed, view=YouTubeView(self.bot))

# Loop Modal for advanced music features
class LoopModal(discord.ui.Modal, title='üîÅ Loop Mode'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    mode = discord.ui.TextInput(
        label='Ch·∫ø ƒë·ªô Loop',
        placeholder='song, queue, ho·∫∑c off',
        style=discord.TextStyle.short,
        max_length=10
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.loop_command(interaction, self.mode.value.lower())
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

# Search Music Modal
class SearchMusicModal(discord.ui.Modal, title='üîç T√¨m ki·∫øm nh·∫°c'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    query = discord.ui.TextInput(
        label='T√¨m ki·∫øm',
        placeholder='Nh·∫≠p t√™n b√†i h√°t ho·∫∑c ca sƒ©...',
        style=discord.TextStyle.short,
        max_length=100
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.search_command(interaction, self.query.value)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

# DJ Mode View
class DJModeView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)
        self.bot = bot
        
    @discord.ui.button(label='üéß Activate DJ', style=discord.ButtonStyle.success, emoji='‚ñ∂Ô∏è')
    async def activate_dj(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.dj_mode_command(interaction, "on")
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
            
    @discord.ui.button(label='üéöÔ∏è Crossfade', style=discord.ButtonStyle.primary, emoji='üîÄ')
    async def crossfade_settings(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = CrossfadeModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üéõÔ∏è Effects', style=discord.ButtonStyle.secondary, emoji='‚ö°')
    async def dj_effects(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = DJEffectsModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üìä DJ Stats', style=discord.ButtonStyle.secondary, emoji='üìà')
    async def dj_stats(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            queue = music_cog.get_queue(interaction.guild.id)
            
            if not getattr(queue, 'dj_mode', False):
                await interaction.response.send_message("‚ùå DJ Mode ch∆∞a ƒë∆∞·ª£c b·∫≠t!", ephemeral=True)
                return
            
            embed = discord.Embed(
                title="üìä DJ Session Stats",
                description="Th·ªëng k√™ phi√™n DJ hi·ªán t·∫°i",
                color=discord.Color.gold()
            )
            embed.add_field(
                name="üéµ Tracks Mixed",
                value=f"{queue.dj_stats.get('tracks_mixed', 0)} b√†i",
                inline=True
            )
            embed.add_field(
                name="üéöÔ∏è Crossfades",
                value=f"{queue.dj_stats.get('crossfades_used', 0)}",
                inline=True
            )
            embed.add_field(
                name="üéß DJ Mode",
                value="‚úÖ Active" if queue.dj_mode else "‚ùå Inactive",
                inline=True
            )
            embed.add_field(
                name="‚öôÔ∏è Settings",
                value=f"Crossfade: {getattr(queue, 'crossfade_duration', 3.0)}s\nBeat Match: {'ON' if getattr(queue, 'beat_match', False) else 'OFF'}",
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
            
    @discord.ui.button(label='‚ùå Deactivate DJ', style=discord.ButtonStyle.danger, emoji='‚èπÔ∏è')
    async def deactivate_dj(self, interaction: discord.Interaction, button: discord.ui.Button):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            await music_cog.dj_mode_command(interaction, "off")
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

    @discord.ui.button(label='‚óÄÔ∏è Back to Advanced', style=discord.ButtonStyle.secondary, emoji='üéõÔ∏è', row=1)
    async def back_to_advanced(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéõÔ∏è Advanced Music Features",
            description="T√≠nh nƒÉng n√¢ng cao cho tr·∫£i nghi·ªám √¢m nh·∫°c t·ªët h∆°n",
            color=discord.Color.purple()
        )
        embed.add_field(
            name="üîÅ Loop Mode",
            value="L·∫∑p l·∫°i b√†i h√°t ho·∫∑c to√†n b·ªô queue",
            inline=False
        )
        embed.add_field(
            name="üîç Search Music",
            value="T√¨m ki·∫øm v√† preview nh·∫°c tr∆∞·ªõc khi ph√°t",
            inline=False
        )
        embed.add_field(
            name="üéÆ Music Quiz",
            value="Tr√≤ ch∆°i ƒëo√°n t√™n b√†i h√°t th√∫ v·ªã",
            inline=False
        )
        embed.add_field(
            name="üéß DJ Mode",
            value="Professional mixing controls & effects",
            inline=False
        )
        await interaction.response.edit_message(embed=embed, view=AdvancedMusicView(self.bot))

# Crossfade Modal for DJ Mode
class CrossfadeModal(discord.ui.Modal, title='üéöÔ∏è Crossfade Settings'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    duration = discord.ui.TextInput(
        label='Crossfade Duration (seconds)',
        placeholder='0.0 - 10.0',
        style=discord.TextStyle.short,
        max_length=5
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        try:
            duration = float(self.duration.value)
            if duration < 0 or duration > 10:
                await interaction.response.send_message("‚ùå Th·ªùi gian crossfade ph·∫£i t·ª´ 0-10 gi√¢y!", ephemeral=True)
                return
                
            music_cog = self.bot.get_cog('MusicCog')
            if music_cog:
                queue = music_cog.get_queue(interaction.guild.id)
                queue.crossfade_duration = duration
                
                embed = discord.Embed(
                    title="üéöÔ∏è Crossfade Updated",
                    description=f"Crossfade duration set to **{duration} seconds**",
                    color=discord.Color.green()
                )
                await interaction.response.send_message(embed=embed, ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
        except ValueError:
            await interaction.response.send_message("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!", ephemeral=True)

# DJ Effects Modal
class DJEffectsModal(discord.ui.Modal, title='üéõÔ∏è DJ Effects'):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
        
    effect = discord.ui.TextInput(
        label='Effect Type',
        placeholder='reverb, echo, flanger, chorus, lowpass, highpass',
        style=discord.TextStyle.short,
        max_length=20
    )
    
    intensity = discord.ui.TextInput(
        label='Intensity (1-100)',
        placeholder='50',
        style=discord.TextStyle.short,
        max_length=3
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        music_cog = self.bot.get_cog('MusicCog')
        if music_cog:
            queue = music_cog.get_queue(interaction.guild.id)
            
            if not getattr(queue, 'dj_mode', False):
                await interaction.response.send_message("‚ùå DJ Mode ch∆∞a ƒë∆∞·ª£c b·∫≠t!", ephemeral=True)
                return
            
            try:
                intensity_val = int(self.intensity.value)
                if intensity_val < 1 or intensity_val > 100:
                    intensity_val = 50
            except ValueError:
                intensity_val = 50
            
            effects_list = ["reverb", "echo", "flanger", "chorus", "lowpass", "highpass", "distortion", "compressor"]
            
            if self.effect.value.lower() not in effects_list:
                await interaction.response.send_message(f"‚ùå Effect kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: {', '.join(effects_list)}", ephemeral=True)
                return
            
            embed = discord.Embed(
                title="üéõÔ∏è DJ Effect Applied",
                description=f"**{self.effect.value.title()}** effect v·ªõi c∆∞·ªùng ƒë·ªô **{intensity_val}%**",
                color=discord.Color.purple()
            )
            embed.add_field(
                name="‚ö° Effect Active",
                value=f"Type: {self.effect.value.title()}\nIntensity: {intensity_val}%",
                inline=False
            )
            
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå Music module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)

# Fun & Games Interactive View
class FunGamesView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)
        self.bot = bot
        
    @discord.ui.button(label='üòÑ Meme', style=discord.ButtonStyle.primary, emoji='üòÇ')
    async def get_meme(self, interaction: discord.Interaction, button: discord.ui.Button):
        fun_cog = self.bot.get_cog('Fun')
        if fun_cog:
            await fun_cog.meme_command(interaction)
        else:
            await interaction.response.send_message("‚ùå Fun module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
        
    @discord.ui.button(label='üê± Cat', style=discord.ButtonStyle.secondary, emoji='üê±')
    async def get_cat(self, interaction: discord.Interaction, button: discord.ui.Button):
        fun_cog = self.bot.get_cog('Fun')
        if fun_cog:
            await fun_cog.cat_command(interaction)
        else:
            await interaction.response.send_message("‚ùå Fun module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
        
    @discord.ui.button(label='üê∂ Dog', style=discord.ButtonStyle.secondary, emoji='üê∂')
    async def get_dog(self, interaction: discord.Interaction, button: discord.ui.Button):
        fun_cog = self.bot.get_cog('Fun')
        if fun_cog:
            await fun_cog.dog_command(interaction)
        else:
            await interaction.response.send_message("‚ùå Fun module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
        
    @discord.ui.button(label='‚úÇÔ∏è K√©o B√∫a Bao', style=discord.ButtonStyle.primary, emoji='‚úÇÔ∏è')
    async def rock_paper_scissors(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = RockPaperScissorsModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üé± 8Ball', style=discord.ButtonStyle.primary, emoji='üé±')
    async def eight_ball(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = EightBallModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='‚óÄÔ∏è Quay l·∫°i', style=discord.ButtonStyle.danger, emoji='üè†')
    async def back_to_menu(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéÆ GenZ Assistant - Main Menu",
            description="Ch·ªçn m·ªôt danh m·ª•c ƒë·ªÉ b·∫Øt ƒë·∫ßu:",
            color=0x3498db
        )
        embed.add_field(name="ü§ñ AI Commands", value="Tr√≠ tu·ªá nh√¢n t·∫°o", inline=True)
        embed.add_field(name="üéµ Music", value="Nghe nh·∫°c", inline=True)
        embed.add_field(name="üéÆ Fun & Games", value="Gi·∫£i tr√≠ & Game", inline=True)
        embed.add_field(name="‚è∞ Reminders", value="Nh·∫Øc nh·ªü", inline=True)
        embed.add_field(name="üìä Leveling", value="H·ªá th·ªëng level", inline=True)
        embed.add_field(name="üõ°Ô∏è Admin", value="Qu·∫£n tr·ªã", inline=True)
        embed.add_field(name="‚öôÔ∏è Utility", value="Ti·ªán √≠ch", inline=True)
        embed.add_field(name="üîß Settings", value="C√†i ƒë·∫∑t", inline=True)
        
        main_view = MenuView(self.bot)
        await interaction.response.edit_message(embed=embed, view=main_view)

# Reminders Interactive View  
class RemindersView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)
        self.bot = bot
        
    @discord.ui.button(label='‚è∞ T·∫°o Reminder', style=discord.ButtonStyle.primary, emoji='üìù')
    async def create_reminder(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = ReminderModal(self.bot)
        await interaction.response.send_modal(modal)
        
    @discord.ui.button(label='üìã Xem Reminders', style=discord.ButtonStyle.secondary, emoji='üëÄ')
    async def view_reminders(self, interaction: discord.Interaction, button: discord.ui.Button):
        scheduler_cog = self.bot.get_cog('Scheduler')
        if scheduler_cog:
            await scheduler_cog.reminders_command(interaction)
        else:
            await interaction.response.send_message("‚ùå Scheduler module kh√¥ng kh·∫£ d·ª•ng!", ephemeral=True)
        
    @discord.ui.button(label='‚óÄÔ∏è Quay l·∫°i', style=discord.ButtonStyle.danger, emoji='üè†')
    async def back_to_main(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="ü§ñ KSC Support - Menu Ch√≠nh",
            description="**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi KSC Support!**\n\nBot ƒëa ch·ª©c nƒÉng v·ªõi AI, Music, Games v√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c.\n\nüî• **T√≠nh nƒÉng HOT:**\n‚Ä¢ üß† AI Chat v·ªõi Gemini\n‚Ä¢ üé® T·∫°o ·∫£nh AI v·ªõi 10+ styles\n‚Ä¢ üéµ Music bot v·ªõi Playlist\n‚Ä¢ üìä Analytics real-time\n\n**Ch·ªçn m·ªôt danh m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt:**",
            color=discord.Color.blurple()
        )
        embed.add_field(
            name="üëã Xin ch√†o!",
            value=f"Ch√†o {interaction.user.mention}! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            inline=False
        )
        embed.set_footer(text="üí° Menu s·∫Ω ƒë√≥ng sau 60s v√† t·ª± ƒë·ªông x√≥a sau 10 ph√∫t | KSC Support v3.0.0")
        await interaction.response.edit_message(embed=embed, view=MenuView(self.bot))

    @discord.ui.button(label='üéµ Music', style=discord.ButtonStyle.success, emoji='üé∂')
    async def music_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéµ Music Commands - YouTube & SoundCloud",
            description="H·ªá th·ªëng ph√°t nh·∫°c ch·∫•t l∆∞·ª£ng cao\n\n**Ch·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën s·ª≠ d·ª•ng:**",
            color=discord.Color.green()
        )
        embed.add_field(
            name="ÔøΩ Ph√°t nh·∫°c",
            value="Ph√°t nh·∫°c t·ª´ YouTube ho·∫∑c SoundCloud",
            inline=False
        )
        embed.add_field(
            name="‚è∏Ô∏è ƒêi·ªÅu khi·ªÉn",
            value="Pause, Resume, Skip, Shuffle nh·∫°c",
            inline=False
        )
        embed.set_footer(text="üéµ Click v√†o button ƒë·ªÉ ƒëi·ªÅu khi·ªÉn nh·∫°c")
        await interaction.response.edit_message(embed=embed, view=YouTubeView(self.bot))

    @discord.ui.button(label='üé® AI Images', style=discord.ButtonStyle.secondary, emoji='üñºÔ∏è')
    async def image_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üé® AI Image Generation",
            description="T·∫°o ·∫£nh AI v·ªõi nhi·ªÅu phong c√°ch kh√°c nhau\n\n**Ch·ªçn style b·∫°n mu·ªën:**",
            color=discord.Color.purple()
        )
        embed.add_field(
            name="üñåÔ∏è T·∫°o ·∫£nh c∆° b·∫£n",
            value="T·∫°o ·∫£nh AI v·ªõi prompt t·ª± do",
            inline=False
        )
        embed.add_field(
            name="üé≠ Styles ƒë·∫∑c bi·ªát",
            value="Anime, Realistic, Cartoon v√† nhi·ªÅu style kh√°c",
            inline=False
        )
        embed.set_footer(text="üé® Click button ƒë·ªÉ ch·ªçn style v√† t·∫°o ·∫£nh")
        await interaction.response.edit_message(embed=embed, view=AIImageView(self.bot))

    @discord.ui.button(label='üéÆ Fun & Games', style=discord.ButtonStyle.danger, emoji='üéØ')
    async def fun_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üéÆ Fun & Entertainment",
            description="Gi·∫£i tr√≠ v√† mini games th√∫ v·ªã\n\n**Ch·ªçn tr√≤ ch∆°i ho·∫∑c gi·∫£i tr√≠:**",
            color=discord.Color.red()
        )
        embed.add_field(
            name="üòÑ H√¨nh ·∫£nh vui",
            value="Memes, ·∫£nh m√®o, ch√≥ v√† nhi·ªÅu h∆°n n·ªØa",
            inline=False
        )
        embed.add_field(
            name="üé≤ Mini Games",
            value="K√©o b√∫a bao, 8ball v√† c√°c tr√≤ ch∆°i kh√°c",
            inline=False
        )
        embed.set_footer(text="üéÆ Click button ƒë·ªÉ ch∆°i!")
        await interaction.response.edit_message(embed=embed, view=FunGamesView(self.bot))

    @discord.ui.button(label='üìä Analytics', style=discord.ButtonStyle.secondary, emoji='üìà')
    async def analytics_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üìä Server Analytics & Stats",
            description="Th·ªëng k√™ v√† ph√¢n t√≠ch server chi ti·∫øt",
            color=discord.Color.gold()
        )
        embed.add_field(
            name="üè† Th·ªëng k√™ Server",
            value="`!serverstats` - T·ªïng quan server\n`!userstats [@user]` - Th·ªëng k√™ user\n`!topmessages` - Top ho·∫°t ƒë·ªông",
            inline=False
        )
        embed.add_field(
            name="üìà Server Stats",
            value="`!serverstats` - Th·ªëng k√™ server\n`!topmessages` - Top ho·∫°t ƒë·ªông\n`!serverinfo` - Th√¥ng tin server",
            inline=False
        )
        embed.add_field(
            name="üîß Utility",
            value="`!ping` - ƒê·ªô tr·ªÖ bot\n`!serverinfo` - Th√¥ng tin server\n`!userinfo [@user]` - Th√¥ng tin user",
            inline=False
        )
        embed.set_footer(text="üìä Real-time tracking v√† insights")
        await interaction.response.edit_message(embed=embed, view=BackView(self.bot))

    @discord.ui.button(label='üõ†Ô∏è Admin Tools', style=discord.ButtonStyle.danger, emoji='‚ö°')
    async def admin_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üõ†Ô∏è Admin & Moderation Tools",
            description="C√¥ng c·ª• qu·∫£n l√Ω server (Ch·ªâ Admin)",
            color=discord.Color.dark_red()
        )
        embed.add_field(
            name="üëÆ Moderation",
            value="`!kick <@user> [l√Ω do]` - Kick th√†nh vi√™n\n`!ban <@user> [l√Ω do]` - Ban th√†nh vi√™n\n`!unban <user_id>` - Unban\n`!mute <@user> <th·ªùi gian>` - Mute",
            inline=False
        )
        embed.add_field(
            name="üí¨ Message Management",
            value="`!clear <s·ªë l∆∞·ª£ng>` - X√≥a tin nh·∫Øn\n`!slowmode <gi√¢y>` - Ch·∫ø ƒë·ªô ch·∫≠m",
            inline=False
        )
        embed.add_field(
            name="üéâ Events Setup",
            value="`!setwelcome <#channel>` - Set welcome\n`!setgoodbye <#channel>` - Set goodbye\n`!toggledm` - DM settings\n`!welcometest` - Test events",
            inline=False
        )
        embed.add_field(
            name="‚ö†Ô∏è L∆∞u √Ω",
            value="C√°c l·ªánh n√†y ch·ªâ d√†nh cho Admin/Moderator",
            inline=False
        )
        embed.set_footer(text="üõ†Ô∏è Qu·∫£n l√Ω server hi·ªáu qu·∫£")
        await interaction.response.edit_message(embed=embed, view=BackView(self.bot))

    @discord.ui.button(label='‚è∞ Reminders', style=discord.ButtonStyle.secondary, emoji='üìÖ')
    async def reminder_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="‚è∞ Reminder & Schedule System",
            description="H·ªá th·ªëng nh·∫Øc nh·ªü v√† l√™n l·ªãch th√¥ng minh\n\n**Qu·∫£n l√Ω reminders c·ªßa b·∫°n:**",
            color=discord.Color.orange()
        )
        embed.add_field(
            name="‚è∞ T·∫°o Reminder",
            value="T·∫°o nh·∫Øc nh·ªü v·ªõi th·ªùi gian v√† n·ªôi dung",
            inline=False
        )
        embed.add_field(
            name="ÔøΩ Xem Reminders",
            value="Xem danh s√°ch c√°c reminder ƒë√£ t·∫°o",
            inline=False
        )
        embed.set_footer(text="‚è∞ Click button ƒë·ªÉ qu·∫£n l√Ω reminders")
        await interaction.response.edit_message(embed=embed, view=RemindersView(self.bot))

    @discord.ui.button(label='‚ùì Help', style=discord.ButtonStyle.secondary, emoji='üÜò')
    async def help_commands(self, interaction: discord.Interaction, button: discord.ui.Button):
        embed = discord.Embed(
            title="üÜò Help & Support",
            description="H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng v√† h·ªó tr·ª£",
            color=discord.Color.light_grey()
        )
        embed.add_field(
            name="üìö C√°ch s·ª≠ d·ª•ng",
            value="‚Ä¢ G√µ `bot ∆°i` ho·∫∑c `bot oi` ƒë·ªÉ m·ªü menu n√†y\n‚Ä¢ S·ª≠ d·ª•ng `!` tr∆∞·ªõc c√°c l·ªánh\n‚Ä¢ M·ªôt s·ªë l·ªánh h·ªó tr·ª£ `/` (slash commands)",
            inline=False
        )
        embed.add_field(
            name="‚ö° Quick Commands",
            value="`!help` - Danh s√°ch l·ªánh\n`!ping` - Ki·ªÉm tra ƒë·ªô tr·ªÖ\n`!serverinfo` - Th√¥ng tin server",
            inline=False
        )
        embed.add_field(
            name="üîß Permissions c·∫ßn thi·∫øt",
            value="‚Ä¢ Send Messages\n‚Ä¢ Read Message History\n‚Ä¢ Embed Links\n‚Ä¢ Attach Files\n‚Ä¢ Connect (cho music)",
            inline=False
        )
        embed.add_field(
            name="üåü Features m·ªõi",
            value="‚Ä¢ AI Image Generation\n‚Ä¢ Music Playlists\n‚Ä¢ Server Analytics\n‚Ä¢ Welcome/Goodbye Events",
            inline=False
        )
        embed.add_field(
            name="üìû Support",
            value="N·∫øu g·∫∑p l·ªói, h√£y b√°o cho Admin server",
            inline=False
        )
        embed.set_footer(text="ü§ñ KSC Support v3.0.0 - Developed with ‚ù§Ô∏è")
        await interaction.response.edit_message(embed=embed, view=BackView(self.bot))

    async def on_timeout(self):
        # Disable t·∫•t c·∫£ buttons khi timeout
        for item in self.children:
            item.disabled = True
        
        try:
            await self.message.edit(view=self)
        except:
            pass

class BackView(discord.ui.View):
    def __init__(self, bot):
        super().__init__(timeout=60)
        self.bot = bot
        
    @discord.ui.button(label='‚óÄÔ∏è Quay l·∫°i Menu ch√≠nh', style=discord.ButtonStyle.primary, emoji='üè†')
    async def back_to_main(self, interaction: discord.Interaction, button: discord.ui.Button):
        # T·∫°o main embed
        embed = discord.Embed(
            title="ü§ñ KSC Support - Menu Ch√≠nh",
            description="**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi KSC Support!**\n\nBot ƒëa ch·ª©c nƒÉng v·ªõi AI, Music, Games v√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c.\n\nüî• **T√≠nh nƒÉng HOT:**\n‚Ä¢ üß† AI Chat v·ªõi Gemini\n‚Ä¢ üé® T·∫°o ·∫£nh AI v·ªõi 10+ styles\n‚Ä¢ üéµ Music bot v·ªõi Playlist\n‚Ä¢ üìä Analytics real-time\n\n**Ch·ªçn m·ªôt danh m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt:**",
            color=discord.Color.blurple()
        )
        embed.set_thumbnail(url="https://cdn.discordapp.com/attachments/123456789/bot_avatar.png")  # Thay b·∫±ng avatar bot
        embed.set_footer(text="üí° Menu s·∫Ω ƒë√≥ng sau 60s v√† t·ª± ƒë·ªông x√≥a sau 10 ph√∫t | KSC Support v3.0.0")
        
        await interaction.response.edit_message(embed=embed, view=MenuView(self.bot))

    async def on_timeout(self):
        for item in self.children:
            item.disabled = True
        try:
            await self.message.edit(view=self)
        except:
            pass

class MenuSystemCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_message(self, message):
        """L·∫Øng nghe tin nh·∫Øn ƒë·ªÉ ph√°t hi·ªán 'bot ∆°i' ho·∫∑c 'bot oi'"""
        if message.author.bot:
            return
        
        content = message.content.lower().strip()
        
        # Ki·ªÉm tra c√°c c√°ch g·ªçi bot
        triggers = ['bot ∆°i', 'bot oi', 'bot ∆°y', 'bot oy', 'hey bot', 'hi bot']
        
        if any(trigger in content for trigger in triggers):
            # T·∫°o main menu embed
            embed = discord.Embed(
                title="ü§ñ KSC Support - Menu Ch√≠nh",
                description="**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi KSC Support!**\n\nBot ƒëa ch·ª©c nƒÉng v·ªõi AI, Music, Games v√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c.\n\nüî• **T√≠nh nƒÉng HOT:**\n‚Ä¢ üß† AI Chat v·ªõi Gemini\n‚Ä¢ üé® T·∫°o ·∫£nh AI v·ªõi 10+ styles\n‚Ä¢ üéµ Music bot v·ªõi Playlist\n‚Ä¢ üìä Analytics real-time\n\n**Ch·ªçn m·ªôt danh m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt:**",
                color=discord.Color.blurple()
            )
            
            # Th√™m th√¥ng tin user
            embed.add_field(
                name="üëã Xin ch√†o!",
                value=f"Ch√†o {message.author.mention}! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
                inline=False
            )
            
            embed.set_footer(text="üí° Menu s·∫Ω ƒë√≥ng sau 60s v√† t·ª± ƒë·ªông x√≥a sau 5 ph√∫t | KSC Support v3.0.0")
            
            # T·∫°o view v·ªõi buttons
            view = MenuView(self.bot)
            
            try:
                msg = await message.channel.send(embed=embed, view=view)
                view.message = msg  # L∆∞u message ƒë·ªÉ c√≥ th·ªÉ edit sau
                
                # Kh√¥ng c·∫ßn auto-delete th·ªß c√¥ng n·ªØa v√¨ auto_cleanup s·∫Ω x·ª≠ l√Ω
                
            except discord.Forbidden:
                await message.channel.send("‚ùå Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i embed. Vui l√≤ng ki·ªÉm tra permissions!")
            except Exception as e:
                await message.channel.send(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")

    @commands.command(name="menu")
    async def manual_menu(self, ctx):
        """Hi·ªÉn th·ªã menu b·∫±ng l·ªánh !menu"""
        embed = discord.Embed(
            title="ü§ñ KSC Support - Menu Ch√≠nh",
            description="**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi KSC Support!**\n\nBot ƒëa ch·ª©c nƒÉng v·ªõi AI, Music, Games v√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c.\n\nüî• **T√≠nh nƒÉng HOT:**\n‚Ä¢ üß† AI Chat v·ªõi Gemini\n‚Ä¢ üé® T·∫°o ·∫£nh AI v·ªõi 10+ styles\n‚Ä¢ üéµ Music bot v·ªõi Playlist\n‚Ä¢ üìä Analytics real-time\n\n**Ch·ªçn m·ªôt danh m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt:**",
            color=discord.Color.blurple()
        )
        
        embed.add_field(
            name="üëã Xin ch√†o!",
            value=f"Ch√†o {ctx.author.mention}! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            inline=False
        )
        
        embed.set_footer(text="üí° Menu s·∫Ω ƒë√≥ng sau 60s v√† t·ª± ƒë·ªông x√≥a sau 5 ph√∫t | KSC Support v3.0.0")
        
        view = MenuView(self.bot)
        
        try:
            msg = await ctx.send(embed=embed, view=view)
            view.message = msg
            
            # Auto-cleanup s·∫Ω x·ª≠ l√Ω vi·ªác x√≥a tin nh·∫Øn
            
        except discord.Forbidden:
            await ctx.send("‚ùå Bot kh√¥ng c√≥ quy·ªÅn g·ª≠i embed. Vui l√≤ng ki·ªÉm tra permissions!")
        except Exception as e:
            await ctx.send(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}")

    @app_commands.command(name="menu", description="Hi·ªÉn th·ªã menu ch√≠nh c·ªßa bot")
    async def slash_menu(self, interaction: discord.Interaction):
        """Slash command cho menu"""
        embed = discord.Embed(
            title="ü§ñ KSC Support - Menu Ch√≠nh",
            description="**Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi KSC Support!**\n\nBot ƒëa ch·ª©c nƒÉng v·ªõi AI, Music, Games v√† nhi·ªÅu t√≠nh nƒÉng th√∫ v·ªã kh√°c.\n\nüî• **T√≠nh nƒÉng HOT:**\n‚Ä¢ üß† AI Chat v·ªõi Gemini\n‚Ä¢ üé® T·∫°o ·∫£nh AI v·ªõi 10+ styles\n‚Ä¢ üéµ Music bot v·ªõi Playlist\n‚Ä¢ üìä Analytics real-time\n\n**Ch·ªçn m·ªôt danh m·ª•c b√™n d∆∞·ªõi ƒë·ªÉ xem chi ti·∫øt:**",
            color=discord.Color.blurple()
        )
        
        embed.add_field(
            name="üëã Xin ch√†o!",
            value=f"Ch√†o {interaction.user.mention}! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?",
            inline=False
        )
        
        embed.set_footer(text="üí° Menu s·∫Ω ƒë√≥ng sau 60s v√† t·ª± ƒë·ªông x√≥a sau 5 ph√∫t | KSC Support v3.0.0")
        
        view = MenuView(self.bot)
        
        try:
            await interaction.response.send_message(embed=embed, view=view)
            msg = await interaction.original_response()
            view.message = msg
            
            # Auto-cleanup s·∫Ω x·ª≠ l√Ω vi·ªác x√≥a tin nh·∫Øn
            
        except Exception as e:
            await interaction.response.send_message(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}", ephemeral=True)

async def setup(bot):
    await bot.add_cog(MenuSystemCog(bot))
