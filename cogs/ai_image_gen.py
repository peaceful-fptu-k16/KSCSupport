import discord
from discord.ext import commands
from discord import app_commands
import aiohttp
import json
import asyncio
import io
import base64
from PIL import Image

class AIImageCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
    @commands.command(name="generate", aliases=["gen", "aiimg"])
    async def generate_image(self, ctx, *, prompt):
        """T·∫°o ·∫£nh AI t·ª´ m√¥ t·∫£ vƒÉn b·∫£n"""
        await ctx.send("üé® ƒêang t·∫°o ·∫£nh... Vui l√≤ng ƒë·ª£i...")
        
        try:
            # S·ª≠ d·ª•ng Pollinations AI (mi·ªÖn ph√≠)
            await self._generate_with_pollinations(ctx, prompt)
        except Exception as e:
            print(f"Pollinations error: {e}")
            try:
                # Fallback: S·ª≠ d·ª•ng Craiyon (mi·ªÖn ph√≠)
                await self._generate_with_craiyon(ctx, prompt)
            except Exception as e2:
                print(f"Craiyon error: {e2}")
                await ctx.send(f"‚ùå L·ªói khi t·∫°o ·∫£nh: {str(e2)}")
    
    async def _generate_with_pollinations(self, ctx, prompt):
        """T·∫°o ·∫£nh v·ªõi Pollinations AI"""
        url = f"https://image.pollinations.ai/prompt/{prompt}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    image_data = await response.read()
                    
                    # T·∫°o file t·ª´ image data
                    file = discord.File(io.BytesIO(image_data), filename="generated_image.png")
                    
                    embed = discord.Embed(
                        title="üé® ·∫¢nh AI ƒë∆∞·ª£c t·∫°o",
                        description=f"**Prompt:** {prompt}",
                        color=discord.Color.purple()
                    )
                    embed.set_image(url="attachment://generated_image.png")
                    embed.set_footer(text="Powered by Pollinations AI")
                    
                    await ctx.send(embed=embed, file=file)
                else:
                    raise Exception(f"HTTP {response.status}")
    
    async def _generate_with_craiyon(self, ctx, prompt):
        """T·∫°o ·∫£nh v·ªõi Craiyon (DALL-E mini)"""
        url = "https://bf.dallemini.ai/generate"
        
        payload = {
            "prompt": prompt
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    images = data.get('images', [])
                    
                    if images:
                        # L·∫•y ·∫£nh ƒë·∫ßu ti√™n
                        image_data = base64.b64decode(images[0])
                        file = discord.File(io.BytesIO(image_data), filename="generated_image.png")
                        
                        embed = discord.Embed(
                            title="üé® ·∫¢nh AI ƒë∆∞·ª£c t·∫°o",
                            description=f"**Prompt:** {prompt}",
                            color=discord.Color.purple()
                        )
                        embed.set_image(url="attachment://generated_image.png")
                        embed.set_footer(text="Powered by Craiyon AI")
                        
                        await ctx.send(embed=embed, file=file)
                    else:
                        raise Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ·∫£nh t·ª´ API")
                else:
                    raise Exception(f"HTTP {response.status}")
    
    @commands.command(name="imagine")
    async def imagine_image(self, ctx, *, description):
        """T·∫°o nhi·ªÅu ·∫£nh AI t·ª´ m√¥ t·∫£"""
        await ctx.send("üé® ƒêang t·∫°o nhi·ªÅu ·∫£nh... Vui l√≤ng ƒë·ª£i...")
        
        try:
            # T·∫°o 3 ·∫£nh kh√°c nhau v·ªõi variations
            prompts = [
                f"{description}",
                f"{description}, artistic style",
                f"{description}, detailed, high quality"
            ]
            
            images = []
            for i, prompt in enumerate(prompts):
                try:
                    url = f"https://image.pollinations.ai/prompt/{prompt}"
                    
                    async with aiohttp.ClientSession() as session:
                        async with session.get(url) as response:
                            if response.status == 200:
                                image_data = await response.read()
                                images.append((f"image_{i+1}.png", image_data))
                    
                    # Delay ƒë·ªÉ tr√°nh rate limit
                    await asyncio.sleep(1)
                except:
                    continue
            
            if images:
                files = [discord.File(io.BytesIO(data), filename=name) for name, data in images]
                
                embed = discord.Embed(
                    title="üé® B·ªô s∆∞u t·∫≠p ·∫£nh AI",
                    description=f"**M√¥ t·∫£:** {description}",
                    color=discord.Color.purple()
                )
                embed.set_footer(text=f"ƒê√£ t·∫°o {len(images)} ·∫£nh ‚Ä¢ Powered by Pollinations AI")
                
                await ctx.send(embed=embed, files=files)
            else:
                await ctx.send("‚ùå Kh√¥ng th·ªÉ t·∫°o ·∫£nh!")
                
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói khi t·∫°o ·∫£nh: {str(e)}")
    
    @commands.command(name="aiavatar")
    async def generate_avatar(self, ctx, *, description):
        """T·∫°o avatar AI"""
        await ctx.send("üë§ ƒêang t·∫°o avatar... Vui l√≤ng ƒë·ª£i...")
        
        try:
            # Th√™m style cho avatar
            avatar_prompt = f"portrait, avatar, {description}, professional, high quality, centered"
            
            url = f"https://image.pollinations.ai/prompt/{avatar_prompt}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        
                        # Resize ·∫£nh th√†nh avatar size (256x256)
                        image = Image.open(io.BytesIO(image_data))
                        image = image.resize((256, 256), Image.Resampling.LANCZOS)
                        
                        # Save l·∫°i
                        output = io.BytesIO()
                        image.save(output, format='PNG')
                        output.seek(0)
                        
                        file = discord.File(output, filename="avatar.png")
                        
                        embed = discord.Embed(
                            title="üë§ Avatar AI ƒë∆∞·ª£c t·∫°o",
                            description=f"**M√¥ t·∫£:** {description}",
                            color=discord.Color.gold()
                        )
                        embed.set_image(url="attachment://avatar.png")
                        embed.set_footer(text="Avatar 256x256 ‚Ä¢ Powered by Pollinations AI")
                        
                        await ctx.send(embed=embed, file=file)
                    else:
                        await ctx.send("‚ùå Kh√¥ng th·ªÉ t·∫°o avatar!")
                        
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói khi t·∫°o avatar: {str(e)}")
    
    @commands.command(name="style")
    async def style_image(self, ctx, style, *, description):
        """T·∫°o ·∫£nh AI v·ªõi style c·ª• th·ªÉ"""
        await ctx.send("üé® ƒêang t·∫°o ·∫£nh v·ªõi style... Vui l√≤ng ƒë·ª£i...")
        
        styles = {
            "anime": "anime style, manga, japanese animation",
            "cartoon": "cartoon style, animated, colorful",
            "realistic": "photorealistic, detailed, high quality",
            "oil": "oil painting, classical art, brush strokes",
            "watercolor": "watercolor painting, soft colors, artistic",
            "pixel": "pixel art, 8bit, retro gaming style",
            "sketch": "pencil sketch, hand drawn, artistic",
            "cyberpunk": "cyberpunk style, neon, futuristic, sci-fi",
            "fantasy": "fantasy art, magical, mystical",
            "vintage": "vintage style, retro, old photograph"
        }
        
        if style.lower() not in styles:
            available_styles = ", ".join(styles.keys())
            await ctx.send(f"‚ùå Style kh√¥ng h·ª£p l·ªá! C√°c style c√≥ s·∫µn: {available_styles}")
            return
        
        try:
            style_prompt = f"{description}, {styles[style.lower()]}"
            
            url = f"https://image.pollinations.ai/prompt/{style_prompt}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        file = discord.File(io.BytesIO(image_data), filename=f"{style}_image.png")
                        
                        embed = discord.Embed(
                            title=f"üé® ·∫¢nh AI - Style {style.title()}",
                            description=f"**M√¥ t·∫£:** {description}",
                            color=discord.Color.purple()
                        )
                        embed.set_image(url=f"attachment://{style}_image.png")
                        embed.set_footer(text=f"Style: {style.title()} ‚Ä¢ Powered by Pollinations AI")
                        
                        await ctx.send(embed=embed, file=file)
                    else:
                        await ctx.send("‚ùå Kh√¥ng th·ªÉ t·∫°o ·∫£nh!")
                        
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói khi t·∫°o ·∫£nh: {str(e)}")
    
    @commands.command(name="enhance")
    async def enhance_prompt(self, ctx, *, simple_prompt):
        """T·∫°o ·∫£nh v·ªõi prompt ƒë∆∞·ª£c c·∫£i thi·ªán"""
        await ctx.send("‚ú® ƒêang c·∫£i thi·ªán prompt v√† t·∫°o ·∫£nh...")
        
        try:
            # C·∫£i thi·ªán prompt
            enhanced_prompt = f"{simple_prompt}, highly detailed, masterpiece, best quality, ultra-detailed, sharp focus, physically-based rendering, extreme detail description, professional, vivid colors, bokeh"
            
            url = f"https://image.pollinations.ai/prompt/{enhanced_prompt}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        file = discord.File(io.BytesIO(image_data), filename="enhanced_image.png")
                        
                        embed = discord.Embed(
                            title="‚ú® ·∫¢nh AI v·ªõi Prompt ƒë∆∞·ª£c c·∫£i thi·ªán",
                            color=discord.Color.gold()
                        )
                        embed.add_field(name="Prompt g·ªëc", value=simple_prompt, inline=False)
                        embed.add_field(name="Prompt c·∫£i thi·ªán", value=enhanced_prompt[:1000] + "..." if len(enhanced_prompt) > 1000 else enhanced_prompt, inline=False)
                        embed.set_image(url="attachment://enhanced_image.png")
                        embed.set_footer(text="Enhanced Quality ‚Ä¢ Powered by Pollinations AI")
                        
                        await ctx.send(embed=embed, file=file)
                    else:
                        await ctx.send("‚ùå Kh√¥ng th·ªÉ t·∫°o ·∫£nh!")
                        
        except Exception as e:
            await ctx.send(f"‚ùå L·ªói khi t·∫°o ·∫£nh: {str(e)}")
    
    # Slash Commands
    @app_commands.command(name="generate", description="T·∫°o ·∫£nh AI t·ª´ m√¥ t·∫£ vƒÉn b·∫£n")
    @app_commands.describe(prompt="M√¥ t·∫£ ·∫£nh b·∫°n mu·ªën t·∫°o")
    async def slash_generate(self, interaction: discord.Interaction, prompt: str):
        """Slash command cho t·∫°o ·∫£nh AI"""
        await interaction.response.defer()
        
        try:
            await interaction.followup.send("üé® ƒêang t·∫°o ·∫£nh... Vui l√≤ng ƒë·ª£i...")
            
            url = f"https://image.pollinations.ai/prompt/{prompt}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        image_data = await response.read()
                        file = discord.File(io.BytesIO(image_data), filename="generated_image.png")
                        
                        embed = discord.Embed(
                            title="üé® ·∫¢nh AI ƒë∆∞·ª£c t·∫°o",
                            description=f"**Prompt:** {prompt}",
                            color=discord.Color.purple()
                        )
                        embed.set_image(url="attachment://generated_image.png")
                        embed.set_footer(text="Powered by Pollinations AI")
                        
                        await interaction.followup.send(embed=embed, file=file)
                    else:
                        await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ t·∫°o ·∫£nh!")
                        
        except Exception as e:
            await interaction.followup.send(f"‚ùå L·ªói khi t·∫°o ·∫£nh: {str(e)}")
    
    @commands.command(name="aihelp")
    async def ai_help(self, ctx):
        """H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng AI Image Generation"""
        embed = discord.Embed(title="üé® AI Image Generation Commands", color=discord.Color.purple())
        embed.add_field(name="!generate <m√¥ t·∫£>", value="T·∫°o ·∫£nh AI t·ª´ m√¥ t·∫£", inline=False)
        embed.add_field(name="!imagine <m√¥ t·∫£>", value="T·∫°o nhi·ªÅu ·∫£nh kh√°c nhau", inline=False)
        embed.add_field(name="!avatar <m√¥ t·∫£>", value="T·∫°o avatar AI", inline=False)
        embed.add_field(name="!style <style> <m√¥ t·∫£>", value="T·∫°o ·∫£nh v·ªõi style c·ª• th·ªÉ", inline=False)
        embed.add_field(name="!enhance <m√¥ t·∫£>", value="T·∫°o ·∫£nh v·ªõi prompt ƒë∆∞·ª£c c·∫£i thi·ªán", inline=False)
        embed.add_field(name="/generate <prompt>", value="Slash command t·∫°o ·∫£nh", inline=False)
        
        embed.add_field(
            name="üìã Styles c√≥ s·∫µn", 
            value="anime, cartoon, realistic, oil, watercolor, pixel, sketch, cyberpunk, fantasy, vintage", 
            inline=False
        )
        
        embed.add_field(
            name="üí° Tips",
            value="‚Ä¢ M√¥ t·∫£ c√†ng chi ti·∫øt, ·∫£nh c√†ng ƒë·∫πp\n‚Ä¢ S·ª≠ d·ª•ng ti·∫øng Anh cho k·∫øt qu·∫£ t·ªët nh·∫•t\n‚Ä¢ Th√™m t·ª´ kh√≥a nh∆∞ 'detailed', 'high quality'",
            inline=False
        )
        
        embed.set_footer(text="Powered by Pollinations AI & Craiyon")
        await ctx.send(embed=embed)

    # Helper methods for menu system interactions
    async def generate_command(self, interaction, prompt):
        """Helper method for generate command via interaction"""
        await interaction.response.defer()
        
        if not prompt.strip():
            await interaction.followup.send("‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£ cho ·∫£nh!", ephemeral=True)
            return
            
        try:
            # Use existing generate logic
            image_url = f"https://image.pollinations.ai/prompt/{prompt.replace(' ', '%20')}"
            
            embed = discord.Embed(
                title="üé® AI Image Generated",
                description=f"**Prompt:** {prompt}",
                color=discord.Color.purple()
            )
            embed.set_image(url=image_url)
            embed.set_footer(text="Powered by Pollinations AI")
            
            await interaction.followup.send(embed=embed)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}", ephemeral=True)

    async def style_command(self, interaction, style, prompt):
        """Helper method for style command via interaction"""
        await interaction.response.defer()
        
        if not prompt.strip():
            await interaction.followup.send("‚ùå Vui l√≤ng nh·∫≠p m√¥ t·∫£ cho ·∫£nh!", ephemeral=True)
            return
            
        try:
            # Add style to prompt
            styled_prompt = f"{prompt}, {style} style, high quality, detailed"
            image_url = f"https://image.pollinations.ai/prompt/{styled_prompt.replace(' ', '%20')}"
            
            embed = discord.Embed(
                title=f"üé® AI Image - {style.title()} Style",
                description=f"**Prompt:** {prompt}\n**Style:** {style}",
                color=discord.Color.purple()
            )
            embed.set_image(url=image_url)
            embed.set_footer(text="Powered by Pollinations AI")
            
            await interaction.followup.send(embed=embed)
            
        except Exception as e:
            await interaction.followup.send(f"‚ùå C√≥ l·ªói x·∫£y ra: {str(e)}", ephemeral=True)

async def setup(bot):
    await bot.add_cog(AIImageCog(bot))
